import{_ as l,p as i,q as n,a1 as s}from"./framework-5866ffd3.js";const a={},t=s(`<h2>定位</h2><p>定位解决盒子层叠显示的问题</p><p>浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p><p>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p><p><strong>定位=定位模式 + 边偏移</strong></p><ul><li><p>定位模式：用于指定一个元素在文档中的定位方式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">position</span><span class="token punctuation">:</span> static | relative | absolute | fixed<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>边偏移（方位属性）：决定了该元素的最终位置。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>top | bottom | left | right

边偏移需要配合定位模式使用，单独使用无效
top 和 bottom 不要同时使用
left 和 right 不要同时使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="静态定位static" tabindex="-1"><a class="header-anchor" href="#静态定位static" aria-hidden="true">#</a> 静态定位static</h3><ul><li>静态定位是元素默认定位方式</li><li>静态定位是按照标准流特性摆放位置，它没有方位属性。</li><li>静态定位在布局时我们几乎不用的。</li></ul><h3 id="相对定位relative" tabindex="-1"><a class="header-anchor" href="#相对定位relative" aria-hidden="true">#</a> 相对定位relative</h3><ul><li><p>自恋型，相对于自己之前的位置进行移动。</p></li><li><p>特点：</p><ul><li>配合方位属性实现移动</li><li>相对于自己原来的位置进行移动。</li><li><strong>在页面中继续占有原位置，没有脱标。</strong></li></ul></li></ul><h3 id="绝对定位absolute" tabindex="-1"><a class="header-anchor" href="#绝对定位absolute" aria-hidden="true">#</a> 绝对定位absolute</h3><ul><li>拼祖先型，相对于非静态定位的祖先元素进行定位移动。</li><li>特点： <ul><li>无祖先元素或祖先元素中没有定位，默认相对于浏览器的可视区域进行移动。</li><li>祖先元素中有定位（相对、绝对、固定定位），相对于最近的且有定位的祖先元素进行移动。</li><li>参照最近的并且已经定位的父辈元素，一层一层向外找，如果父辈无定位，则参照浏览器的可视区域进行移动。</li><li><strong>绝对定位脱离标准流，不占有原位置。</strong></li><li><strong>绝对定位的盒子显示模式具有行内块元素特点：加宽高生效，如果没设宽高，也没内容，盒子的宽度就是0。</strong></li></ul></li></ul><h3 id="固定定位fixed" tabindex="-1"><a class="header-anchor" href="#固定定位fixed" aria-hidden="true">#</a> 固定定位fixed</h3><ul><li><p>认死理型，固定定位是元素固定于浏览器可视区的位置。（主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。）</p></li><li><p>特点：</p><ul><li>需要配合方位属性实现移动</li><li>相对于浏览器的可视区域进行移动（跟父元素没有任何关系、不随滚动条滚动）</li><li>脱离标准流，不占有原位置。可以看做是一种特殊的<strong>绝对定位</strong>。</li></ul></li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><ul><li><p>子绝父相</p><ul><li><p>子元素：绝对定位</p></li><li><p>父元素：相对定位</p><ul><li>因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</li><li>如果父元素不需要占有位置，子绝父绝也会遇到</li></ul></li><li><p>好处：</p><ul><li>父元素是相对定位，则对网页布局影响最小</li></ul></li></ul></li><li><p>sticky 粘性定位</p><ul><li><p>粘性定位可以被认为是相对定位和固定定位的混合</p></li><li><p>特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom 其中一个才有效</li><li>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</li></ul></li><li><p>注意：</p><ul><li>边偏移需要和定位模式联合使用，单独使用无效；</li><li>top 和 bottom不要同时使用；</li><li>left 和 right不要同时使用。</li></ul></li></ul></li></ul><h3 id="层叠循序" tabindex="-1"><a class="header-anchor" href="#层叠循序" aria-hidden="true">#</a> 层叠循序</h3><ul><li><p>层级：层叠顺序，垂直于屏幕，上下叠放的关系。</p></li><li><p>层级问题</p><ul><li><p>定位的元素 层级高于没定位元素</p></li><li><p>都定位的元素，层级相同，显示时遵循 <strong>后来者居上</strong>（指html标签的先后顺序）</p></li></ul></li><li><p>堆叠顺序（z-index）</p><ul><li><p>不同布局方式元素的层级关系：</p><ul><li>标准流 &lt; 浮动 &lt; 定位</li></ul></li><li><p>不同定位之间的层级关系：</p><ul><li>相对、绝对、固定默认层级相同，此时遵循就近原则，下面的会覆盖上面的元素。</li></ul></li><li><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序（z轴)</p></li><li><p>特点：</p><ul><li>属性值：正整数、负整数或0，默认值是 0，数值越大，盒子越靠上；</li><li>如果属性值相同，则按照书写顺序，后来居上；</li><li>数字后面不能加单位。</li></ul></li><li><p>注意：</p><ul><li>z-index只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他标准流、浮动和静态定位无效。</li></ul></li></ul></li><li><p>子绝父相中的绝对定位的盒子水平居中</p><ul><li><p>让盒子的左侧移动到父级元素的水平中心位置；</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> 
让盒子向左移动自身宽度的一半。

<span class="token property">margin-left</span><span class="token punctuation">:</span> - <span class="token punctuation">(</span>1/2width<span class="token punctuation">)</span> px<span class="token punctuation">;</span> 
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  二者等价，推荐使用后者！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>子绝父相中的绝对定位的盒子水平垂直居中</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定位特殊特性</p><ul><li><p>绝对定位和固定定位也和浮动类似。</p><ul><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ul></li><li><p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p><ul><li>可以用inline-block 转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li></ul></li><li><p>所以说， 一个行内的盒子，如果加了浮动、固定定位和绝对定位，不用转换，就可以给这个盒子直接设置宽度和高度等。</p></li></ul></li><li><p><strong>脱标的盒子不会触发外边距塌陷</strong></p><ul><li>浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</li><li>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了。</li></ul></li><li><p><strong>绝对定位（固定定位）会完全压住盒子</strong></p><ul><li>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</li><li>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</li><li>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</li></ul></li></ul><table><thead><tr><th>定位方式</th><th>属性值</th><th>相对于谁移动</th><th>是否占位置</th></tr></thead><tbody><tr><td>静态定位</td><td>static</td><td>不能通过方位属性移动</td><td>占位置</td></tr><tr><td>相对定位</td><td>relative</td><td>相对于自己原来的位置</td><td>占位置</td></tr><tr><td>绝对定位</td><td>absolute</td><td>相对于最近的且有定位的祖先元素移动</td><td>不占位置（脱标）</td></tr><tr><td>固定定位</td><td>fixed</td><td>相对于浏览器可视区域</td><td>不占位置（脱标）</td></tr></tbody></table><p>​</p><h3 id="浮动与定位的特点" tabindex="-1"><a class="header-anchor" href="#浮动与定位的特点" aria-hidden="true">#</a> 浮动与定位的特点</h3><ul><li><p>标准流</p><ul><li><p>行内元素 设置宽高无效</p></li><li><p>块级元素 宽度不设置，默认是父元素的100%</p><p>块级元素 高度不设置，高度由内容撑开</p></li></ul></li><li><p>浮动和定位</p><ul><li><p>行内元素设置**（绝对、固定）定位<strong>或者</strong>浮动**后，设置宽高有效果。</p><ul><li>不设置宽高，默认由内容撑开的</li></ul></li><li><p>块级元素设置**（绝对、固定）**定位或者浮动后，不设宽高，默认大小是内容的大小。</p></li></ul></li></ul><p><strong>浮动或定位后的元素，默认宽度由内容撑开</strong></p><p><strong>浮动或定位后的行内元素，宽度和高度起作用</strong></p><h3 id="网页布局总结" tabindex="-1"><a class="header-anchor" href="#网页布局总结" aria-hidden="true">#</a> 网页布局总结</h3><p>通过盒子模型,清楚知道大部分html标签是一个盒子。</p><p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p><p>一个完整的网页,是标准流、浮动、定位一起完成布局的,每个都有自己的专门用法。</p><ul><li><p>标准流</p><ul><li>块级元素：独占一行，从上往下，垂直布局。</li><li>行内元素/行内块元素：一行显示多个，从左到右，水平布局，空间不够自动折行。</li></ul></li><li><p>浮动：可以让原本垂直布局的块级元素变成水平布局。</p></li><li><p>定位：可以让元素自由的摆放在网页的任意位置。</p><ul><li>一般用于盒子之间的层叠情况。 <ul><li>定位之后的元素层级最高，可以叠在其他盒子上面。</li></ul></li></ul></li></ul>`,29),e=[t];function p(u,d){return i(),n("div",null,e)}const o=l(a,[["render",p],["__file","position.html.vue"]]);export{o as default};
