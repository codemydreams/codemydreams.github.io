import{_ as p,M as i,p as o,q as c,R as n,t as a,N as e,V as t,a1 as l}from"./framework-5866ffd3.js";const u={},d=l('<h2>数据类型</h2><h4 id="计算机程序可以处理大量的数据-为什么要给数据分类" tabindex="-1"><a class="header-anchor" href="#计算机程序可以处理大量的数据-为什么要给数据分类" aria-hidden="true">#</a> 计算机程序可以处理大量的数据，为什么要给数据分类？</h4><ul><li>更加充分和高效的利用内存</li><li>也更加方便程序员的使用数据</li></ul><h4 id="js的数据类型整体分为两大类" tabindex="-1"><a class="header-anchor" href="#js的数据类型整体分为两大类" aria-hidden="true">#</a> JS的数据类型整体分为两大类：</h4><ul><li><p>简单数据类型（值类型）</p><ul><li>Number</li><li>Boolean</li><li>String</li><li>null</li><li>undefined</li></ul></li><li><p>复杂数据类型（引用类型）</p><ul><li>Object</li></ul></li></ul><h3 id="简单数据类型" tabindex="-1"><a class="header-anchor" href="#简单数据类型" aria-hidden="true">#</a> 简单数据类型</h3><h4 id="number-数字型" tabindex="-1"><a class="header-anchor" href="#number-数字型" aria-hidden="true">#</a> Number（数字型）</h4>',7),r=n("li",null,[n("p",null,"JavaScript中的正数、负数、小数等统一称为数字类型。")],-1),k=l('<p><code>最大值</code>：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p><p><code>最小值</code>：Number.MIN_VALUE，这个值为：5e-32</p><p><code>Infinity</code> ：代表无穷大，大于任何数值</p><p><code>-Infinity</code> ：代表无穷小，小于任何数值</p><p><code>NaN</code> ：Not a number，代表一个非数值</p><br><h4 id="boolean-布尔型" tabindex="-1"><a class="header-anchor" href="#boolean-布尔型" aria-hidden="true">#</a> Boolean（布尔型）</h4>',7),v=n("li",null,"表示肯定或否定时在计算机中对应的是布尔类型数据。",-1),m=n("li",null,[a("它有两个固定的值 "),n("code",null,"true"),a(" 和 "),n("code",null,"false"),a("，表示肯定的数据用 true（真），表示否定的数据用 false（假）。")],-1),b=n("li",null,"布尔值很少是直接赋值得到的，都是从结果中得到，主要利用布尔值进行判断。",-1),h=n("br",null,null,-1),g=n("h4",{id:"string-字符串型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-字符串型","aria-hidden":"true"},"#"),a(" String（字符串型）")],-1),f=n("li",null,"字符串是个伪数组。",-1),j=n("li",null,[a("通过 "),n("code",null,"单引号（''）"),a("、"),n("code",null,'双引号（""）'),a(" 或 "),n("code",null,"反引号（``）"),a("包裹的数据都叫字符串，单引号和双引号没有本质上的区别。")],-1),y=n("li",null,[a("单引号或双引号一定要成对使用，支持互相嵌套，使用规则："),n("strong",null,"外双内单"),a("或"),n("strong",null,"外单内双"),a("。")],-1),x=n("li",null,[a("必要时可以使用转义符 "),n("code",null,"\\"),a("，输出单引号或双引号。")],-1),w=l('<h5 id="模版字符串" tabindex="-1"><a class="header-anchor" href="#模版字符串" aria-hidden="true">#</a> 模版字符串</h5><p>符号：<code>``</code></p><p>优点：支持换行，使开发更高效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//内容拼接变量时，用 ${} 包住变量</span>\ndocument<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h5><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\\n</td><td>换行符，n是newline的意思</td></tr><tr><td>\\ \\</td><td>斜杠 \\</td></tr><tr><td>\\&#39;</td><td>&#39;单引号</td></tr><tr><td>\\&quot;</td><td>&quot;双引号</td></tr><tr><td>\\t</td><td>tab缩进</td></tr><tr><td>\\b</td><td>空格，b是blank的意思</td></tr></tbody></table><br><h4 id="null-空值" tabindex="-1"><a class="header-anchor" href="#null-空值" aria-hidden="true">#</a> null（空值）</h4>',8),_=n("li",null,"null用于定义一个空对象，即如果变量要用来保存引用类型，可以在初始化时将其设置为null。",-1),N=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//null表示值为空</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token comment">/*
	通常都是在结果中得到的
	如果点取消，就得到null
	如果什么都没输入，点确认，变量里相当于存了空字符串
*/</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入年龄：&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="null-和-undefined-区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-区别" aria-hidden="true">#</a> null 和 undefined 区别：</h5><ul><li>null表示变量没有值</li><li>undefined表示变量已被声明，但是并未赋值。</li></ul><h5 id="null开发中的使用场景" tabindex="-1"><a class="header-anchor" href="#null开发中的使用场景" aria-hidden="true">#</a> null开发中的使用场景：</h5><ul><li>官方解释：把null作为尚未创建的对象</li><li>大白话：看将来有个变量里面存放一个对象，如果还没准备好对象，可以放个null</li></ul><br><h4 id="undefined-未定义" tabindex="-1"><a class="header-anchor" href="#undefined-未定义" aria-hidden="true">#</a> undefined（未定义）</h4>`,7),S=n("li",null,[n("p",null,"未定义是比较特殊的类型，只有一个值undefined。")],-1),q=n("li",null,[n("p",null,"只声明变量，不赋值的情况下，变量的默认值就是undefined。（一般很少直接为某个变量赋值为undefined）")],-1),M=n("li",null,[n("p",null,[a("未赋值与未定义的变量值都为 "),n("code",null,"undefined"),a(" ，建议声明变量设置初始值，以便区分变量状态。")])],-1),A=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age   <span class="token comment">//声明变量但未赋值</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>   <span class="token comment">//输出undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="undefined开发中的使用场景" tabindex="-1"><a class="header-anchor" href="#undefined开发中的使用场景" aria-hidden="true">#</a> undefined开发中的使用场景：</h5><ul><li>定义变量未给值就是 undefined</li><li>开发中经常声明一个变量，等待传送过来的数据，如果检测变量是undefined就说明没有值传递过来</li></ul><br><h3 id="复杂数据类型" tabindex="-1"><a class="header-anchor" href="#复杂数据类型" aria-hidden="true">#</a> 复杂数据类型</h3><h4 id="object-对象" tabindex="-1"><a class="header-anchor" href="#object-对象" aria-hidden="true">#</a> Object（对象）</h4><h5 id="什么是对象" tabindex="-1"><a class="header-anchor" href="#什么是对象" aria-hidden="true">#</a> 什么是对象</h5><p>对象（object）：JavaScript里的一种数据类型，可以理解为是一种无序的数据（键值对）集合。</p><p>特点：可以详细的描述某个事物，是一个能够具体做事情的事物</p><p>作用：描述复杂的数据、封装代码</p><h5 id="对象使用" tabindex="-1"><a class="header-anchor" href="#对象使用" aria-hidden="true">#</a> 对象使用</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//声明语法：</span>
<span class="token comment">//构造函数写法</span>
<span class="token keyword">let</span> 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//字面量写法</span>
<span class="token keyword">let</span> 对象名<span class="token operator">=</span><span class="token punctuation">{</span>
	属性名：属性值，
	方法名：函数（匿名函数）
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象由属性和方法组成</p><ul><li>属性：信息或叫特征（名词）。 <ul><li>比如：手机尺寸、颜色等</li></ul></li><li>方法：功能或叫行为（动词）。 <ul><li>比如：手机打电话、发短信等</li></ul></li><li>注意： <ul><li>属性 <ul><li>属性都是成对出现的，包括属性名和值，它们之间使用英文：分隔</li><li>多个属性之间使用英文，分隔</li><li>属性就是依附在对象上的变量（外面是变量，对象内是属性）</li><li>属性名可以使用&quot;&quot;或&#39;&#39;，一般情况下省略，除非名称遇到特殊符号如空格、中横线等。</li></ul></li><li>方法 <ul><li>方法是由方法名和函数两部分构成，它们之间使用：分隔</li><li>多个属性之间使用英文，分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用&quot;&quot;或&#39;&#39;，一般情况下省略，除非名称遇到特殊符号如空格、中横线等。</li></ul></li></ul></li></ul></li><li><p>属性</p><ul><li><p>添加属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//第一种</span>
对象名<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 值
<span class="token comment">//第二种</span>
对象名<span class="token punctuation">[</span>属性名<span class="token punctuation">]</span> <span class="token operator">=</span> 值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>属性访问</p><p>声明对象，并添加了若干属性后，可以使用.或[]获得对象中属性对应的值，我们称之为属性访问。简单理解就是获得对象里面的属性值。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象<span class="token punctuation">.</span>属性名<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象<span class="token punctuation">[</span><span class="token string">&#39;属性名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法</p><ul><li><p>添加方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//第一种</span>
对象名<span class="token punctuation">.</span><span class="token function-variable function">方法名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token punctuation">}</span>

<span class="token comment">//第二种</span>
对象名<span class="token punctuation">[</span>方法名<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法访问</p><p>声明对象，并添加了若干方法后，可以使用.调用对象中函数，我们称之为方法调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象<span class="token punctuation">.</span><span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="操作对象" tabindex="-1"><a class="header-anchor" href="#操作对象" aria-hidden="true">#</a> 操作对象</h5><p>对象本质是无序的数据集合，操作数据无非就是增、删、改、查。</p><ul><li><p>查询对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象<span class="token punctuation">.</span>属性 或者 对象<span class="token punctuation">[</span><span class="token string">&#39;属性&#39;</span><span class="token punctuation">]</span>

对象<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新赋值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象<span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值

对象<span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象添加新的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象<span class="token punctuation">.</span>新属性名 <span class="token operator">=</span> 新值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除对象中属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> 对象<span class="token punctuation">.</span>属性名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>新增一个属性时，首先会去对象里面找是否有这个属性，如果有则更改其值，如果没有则新增这个属性。</p><h5 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象" aria-hidden="true">#</a> 遍历对象</h5><ul><li><p>对象没有像数组一样的length属性，所以无法确定长度。</p></li><li><p>对象里面是无序的键值对，没有规律。不像数组里面有规律的下标</p></li><li><p>for in 循环，专门遍历对象的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//语法：</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> 变量名 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象<span class="token punctuation">[</span>变量名<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//举例：</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;小苏&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>   <span class="token comment">//得到带字符串的属性名</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//得到属性值</span>
<span class="token punctuation">}</span>

注意：
	获取属性值是不用 对象名<span class="token punctuation">.</span>k，会报<span class="token keyword">undefined</span>，应使用 对象名<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
	变量名一般用k表示，代表对象中的属性名，即k <span class="token operator">===</span> <span class="token string">&#39;uname&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;age&#39;</span>，所以当用obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>获取属性值时，k不能加<span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将其他类型转为字符串类型</p><ul><li>null 和 undefined 不能够使用 .toString()</li><li>只有对象类型才能 .toString()</li><li>为什么数字类型和布尔类型可以使用 <ul><li>因为数字和布尔类型也是对象的一种</li></ul></li></ul></li></ul><h5 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象" aria-hidden="true">#</a> 内置对象</h5><ul><li><p>内置对象是什么？</p><p>JavaScript内部提供的对象，包含各种属性和方法给开发者调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内置对象Math</p><ul><li><p>Math对象时JavaScript提供的一个“数学高手”对象</p></li><li><p>提供一系列做数学运算的方法</p></li><li><p>方法有：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>random()</td><td>生成0-1之间的随机数（包含0不包含1）</td></tr><tr><td>ceil()</td><td>向上取整（对0不公平，概率低，不推荐使用）</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>round()</td><td>就近取整（.5往大取整） 四舍五入</td></tr><tr><td>max()</td><td>找最大数</td></tr><tr><td>min()</td><td>找最小数</td></tr><tr><td>pow(x,y)</td><td>幂运算： x的y次方</td></tr><tr><td>abs()</td><td>返回一个数的绝对值</td></tr></tbody></table></li></ul></li><li><p>生成任意范围随机数</p><ul><li><p>生成0-10的随机数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生成5-10的随机数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生成N-M之间的随机数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">M</span><span class="token operator">-</span><span class="token constant">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token constant">N</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h5><h6 id="_1-术语解释" tabindex="-1"><a class="header-anchor" href="#_1-术语解释" aria-hidden="true">#</a> 1. 术语解释</h6><table><thead><tr><th>术语</th><th>解释</th><th>举例</th></tr></thead><tbody><tr><td>关键字</td><td>在JavaScript中有特殊意义的词汇</td><td>let、var、function、if、else、switch、case、break</td></tr><tr><td>保留字</td><td>在目前的JavaScript中没意义，但未来可能会具有特殊意义的词汇</td><td>int、short、long、char</td></tr><tr><td>标识（标识符）</td><td>变量名，函数名的另一种叫法</td><td>无</td></tr><tr><td>表达式</td><td>能产生值的代码，一般配合运算符出现</td><td>10+3、age&gt;=18</td></tr><tr><td>语句</td><td>一句代码也称之为一条语句，一般按用途还会分类：输出语句、声明语句、分支语句</td><td>无</td></tr></tbody></table><p>​</p><h6 id="_2-基本数据类型和引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-基本数据类型和引用数据类型" aria-hidden="true">#</a> 2. 基本数据类型和引用数据类型</h6><ul><li><p>简单数据类型又叫基本数据类型或者值类型，复杂类型又叫做引用类型</p><ul><li>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型 <ul><li>string、number、boolean、undefined、null</li></ul></li><li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 <ul><li>通过new关键字创建的对象（系统对象、自定义对象），如Object、Array、Date等</li></ul></li></ul></li><li><p>堆栈空间分配区别：</p><ul><li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈； <ul><li>值类型（简单数据类型）的数据直接存放在变量（栈空间）中。</li></ul></li><li>堆（操作系统）：存储复杂类型（对象），一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。 <ul><li>引用类型变量（栈空间）例存放的是地址，真正的对象实例存放在堆空间中。</li></ul></li></ul></li></ul><h4 id="数组-object" tabindex="-1"><a class="header-anchor" href="#数组-object" aria-hidden="true">#</a> 数组（Object）</h4><p>数组（Array）是一种可以按顺序保存多个数据的集合，属于<strong>对象类型</strong>的一种，数组是有长度的。</p><h5 id="声明语法" tabindex="-1"><a class="header-anchor" href="#声明语法" aria-hidden="true">#</a> 声明语法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span> 使用构造函数声明数组
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

注意：
	构造函数内只有一个参数，则表示数组的长度
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">//数组的长度是10</span>
  如果输入多个参数则表示数组的初始化
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;小苏&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>


<span class="token number">2.</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">[</span>数据<span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">2</span><span class="token punctuation">,</span>数据<span class="token number">3</span><span class="token punctuation">,</span>…<span class="token punctuation">,</span>数据n<span class="token punctuation">]</span>

例：<span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小丽&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小米&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组是按顺序保存，所以每个数据都有自己的编号</li><li>计算机中的编号从0开始（索引、下标）</li><li>在数组中，数据的编号也叫索引或下标</li><li><strong>数组可以存储任意类型的数据</strong></li></ul><h5 id="赋值语法" tabindex="-1"><a class="header-anchor" href="#赋值语法" aria-hidden="true">#</a> 赋值语法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>数组名<span class="token punctuation">[</span>下标<span class="token punctuation">]</span> <span class="token operator">=</span> 值

例如：
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;小苏&#39;</span>
	arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;小旭&#39;</span>

如果想修改数组的值，找对应的索引重新赋值即可。
	arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;小苏同学&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="取值语法" tabindex="-1"><a class="header-anchor" href="#取值语法" aria-hidden="true">#</a> 取值语法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>数组名<span class="token punctuation">[</span>下标<span class="token punctuation">]</span>

例如：
	<span class="token comment">//取值小苏</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小苏&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小旭&#39;</span><span class="token punctuation">]</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h3><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h4><blockquote><p>js提供了一个可以返回数据类型的关键字：<code>typeof</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// typeof用法</span>
<span class="token keyword">typeof</span> 数据<span class="token punctuation">;</span>
<span class="token keyword">typeof</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
	区别：
		typeof 数据	 ：是一个语句，从左到右，优先检测左边的数据，再进行后续操作。
		typeof(数据) ：是一个函数，会先执行完小括号里面的语句，再检测数据。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// number</span>
<span class="token comment">// 语句式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h4><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p><p>也可以理解为是否为某个对象的实例，<code>typeof</code> 不能区分数组，但 <code>instanceof</code> 则可以。</p><h4 id="值类型与对象" tabindex="-1"><a class="header-anchor" href="#值类型与对象" aria-hidden="true">#</a> 值类型与对象</h4><p>下面是使用字面量与对象方法创建字符串，返回的是不同类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token string">&quot;xiaosutongxue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;xstx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有对象才有方法使用，但在<code>JS</code>中也可以使用值类型调用方法，因为它会在执行时将值类型转为对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token string">&quot;xiaosutongxue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;xstx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//13</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p><strong>那么为什么需要类型转换呢？</strong></p><ul><li><p>使用表单、prompt 获取过来的数据默认是字符串类型的，不能直接简单的进行加法运算，此时需要转换变量的数据类型。</p></li><li><p>类型转换就是把一种数据类型的变量转换成我们需要的数据类型。</p></li></ul><h4 id="显式转换" tabindex="-1"><a class="header-anchor" href="#显式转换" aria-hidden="true">#</a> 显式转换</h4><ul><li>编写程序时过度依赖系统内部的隐式转换是不严谨的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。</li><li>为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</li><li>概念：自己写代码告诉系统该转成什么类型。</li></ul><h4 id="转换为数字型" tabindex="-1"><a class="header-anchor" href="#转换为数字型" aria-hidden="true">#</a> 转换为数字型</h4><ul><li><p><strong>Number()</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只有包含纯数字的字符串能被转换出具体的数字，否则结果是NaN.</span>
<span class="token comment">// NaN也是number类型的数据，代表非数字。</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;3000&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 3000</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parseInt()</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转整数，且开头必须为正负号或者数字开头，且是连续的数字，如果遇到非数字则停止。</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;+50000axcds123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//+50000</span>
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parseFloat()</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以保留小数，经常用于过滤单位（只能识别数字开头的）</span>
<span class="token comment">// 转小数，注意科学记数法e。</span>
<span class="token comment">// 开头必须为正负号或者数字开头，且是连续的数字，遇到第一个小数点，向后检测，如果后面是连续的数字则转出，如果遇到非数字或者第二个小数点则停止。</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;3.14&#39;</span><span class="token punctuation">)</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;3e2&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><h4 id="转换为字符型" tabindex="-1"><a class="header-anchor" href="#转换为字符型" aria-hidden="true">#</a> 转换为字符型</h4><ul><li><p><strong>String()</strong></p></li><li><p><strong>变量.toString()</strong></p></li><li><p>数据 + &#39; &#39;</p></li><li><p><strong><code>null</code> 和 <code>undefined</code> 都不能使用 <code>.toString()</code> 转字符串</strong></p><ul><li>数字转字符串要放在 <strong>括号</strong> 里，例如：(123).toString()</li></ul></li></ul><br><h4 id="转换为布尔型" tabindex="-1"><a class="header-anchor" href="#转换为布尔型" aria-hidden="true">#</a> 转换为布尔型</h4><ul><li><strong>Boolean()</strong></li></ul><br><h4 id="有6个值当false来看的" tabindex="-1"><a class="header-anchor" href="#有6个值当false来看的" aria-hidden="true">#</a> 有6个值当false来看的</h4><table><thead><tr><th>数据类型</th><th>转换成布尔值</th></tr></thead><tbody><tr><td>undefined</td><td>false</td></tr><tr><td>null</td><td>false</td></tr><tr><td>0 和 NaN</td><td>false</td></tr><tr><td>布尔值 false</td><td>false</td></tr><tr><td>&#39; &#39;</td><td>false</td></tr><tr><td></td><td></td></tr><tr><td>对象</td><td>true</td></tr></tbody></table><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a> 隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><h4 id="转换规则" tabindex="-1"><a class="header-anchor" href="#转换规则" aria-hidden="true">#</a> 转换规则：</h4><ul><li><p><code>+</code> 号两边只要有一个是字符串，都会把另外一个转成字符串</p></li><li><p>除了<code>+</code> 以外的算术运算符 比如 <code>-</code> <code>*</code> <code>/</code> 等都会把数据转成数字类型</p></li><li><p>在没有字符串类型的前提下，其他类型使用 <code>+</code> 也会存在一些隐式转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、数字 <span class="token operator">+</span> 字符串 ：将数字转换为字符串
<span class="token number">2</span>、数字 <span class="token operator">+</span> boolean ：将 boolean 转换为 number类型
<span class="token number">3</span>、数字 <span class="token operator">+</span> <span class="token keyword">undefined</span> ：结果为 <span class="token number">NaN</span>，<span class="token number">NaN</span>的类型为 number
<span class="token number">4</span>、字符串 <span class="token operator">+</span> boolean ：将boolean 转换为 字符串
<span class="token number">5</span>、boolean <span class="token operator">+</span> boolean ：都转换成number在做相加运算
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>console.log(1 + true)</strong> //2</p><ul><li>将数字类型转换为布尔类型 只有true 或者 false</li><li>把布尔类型 true 或者 false 转为数字类型的话，true转为1，false转为0</li></ul></li><li><p><strong>console.log(1 + null)</strong> //null转为0</p></li><li><p><strong>console.log(1 + undefined)</strong> //undefined是NaN</p></li><li><p>缺点：</p><ul><li>转换类型不明确，靠经验才能总结</li></ul></li><li><p>小技巧：</p><ul><li>+号作为正号解析可以转换成Number</li></ul></li></ul></li></ul>`,70);function J(V,B){const s=i("font");return o(),c("div",null,[d,n("ol",null,[r,n("li",null,[n("p",null,[a("在控制台输出 "),n("strong",null,[e(s,{color:"blue"},{default:t(()=>[a("蓝色")]),_:1})]),a("。")])]),n("li",null,[n("p",null,[a("小数与小数相加存在精度问题，例如："),n("strong",null,[e(s,{color:"red"},{default:t(()=>[a("0.1 + 0.2 ≠ 0.3")]),_:1})])])])]),k,n("ol",null,[v,m,n("li",null,[a("在控制台输出 "),n("strong",null,[e(s,{color:"blue"},{default:t(()=>[a("蓝色")]),_:1})]),a("。")]),b]),h,g,n("ol",null,[f,j,n("li",null,[a("在控制台输出 "),n("strong",null,[e(s,{color:"black"},{default:t(()=>[a("黑色")]),_:1})])]),y,x]),w,n("ol",null,[_,n("li",null,[a("在控制台输出 "),n("strong",null,[e(s,{color:"gray"},{default:t(()=>[a("灰色")]),_:1})]),a("。")])]),N,n("ol",null,[S,q,n("li",null,[n("p",null,[a("在控制台输出 "),n("strong",null,[e(s,{color:"gray"},{default:t(()=>[a("灰色")]),_:1})]),a("。")])]),M]),A])}const O=p(u,[["render",J],["__file","data-type.html.vue"]]);export{O as default};
