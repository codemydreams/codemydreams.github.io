import{_ as s,M as n,p as r,q as c,R as t,t as o,N as a,a1 as l}from"./framework-5866ffd3.js";const u={},i=t("h2",null,"Vuex",-1),p={href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},g=l("<p>一个数据只要放在了Vuex中，当前所有的组件都可以直接访问这个数据。</p><blockquote><p>Vuex有5个核心属性</p></blockquote><ul><li>State：相当于data属性，用于存储数据</li><li>Getters：相当于计算属性，当值发生改变时，自动触发</li><li>Mutations：同步修改state中的数据，通过commit()调用mutations中的方法，同步属性不能执行异步操作</li><li>Actions：异步修改state中的数据，通过dispatch()调用actions中的方法</li><li>Modules</li></ul><blockquote><p>什么时候用Vuex？</p></blockquote><p>数据需要多组件共享，并且数据量庞大，此时就适合使用Vuex进行状态管理。</p><p>注意：Vuex会随着页面刷新或关闭，将所有数据恢复至最初始的状态，所以它并不能替代localStorage。</p><blockquote><p>Vuex工作流程</p></blockquote><p>在组件中通过 <code>dispatch</code> 分发 <strong>Actions</strong> ，在 <strong>Actions</strong>中通过 <code>commit</code> 提交 <strong>Mutations</strong> ，在<strong>Mutations</strong>中修改<strong>State</strong>，伴随着<strong>state</strong>改变重新渲染组件</p><blockquote><p><strong>Action</strong>是不是有点多余呢，我直接操作<strong>Mutations</strong>不可以吗？</p></blockquote><p>用户可以直接操作<strong>Mutations</strong>，<code>this.$store.commit</code></p><p><strong>Action</strong>是异步的，可以在里面做数据请求，拿接口的返回数据对<strong>State</strong>进行操作</p>",11);function d(_,x){const e=n("ExternalLinkIcon");return r(),c("div",null,[i,t("p",null,[t("a",p,[o("vuex"),a(e)]),o("是一个专为vue.js应用程序开发的一种状态管理模式，它主要采用的是集中化管理所有组件中的状态。说的直白一些，vuex就是vue.js中管理数据状态的一个库，也就是我们可以将所有组件中的公共数据在vuex中集中管理。")]),g])}const h=s(u,[["render",d],["__file","vuex.html.vue"]]);export{h as default};
