import{_ as n,p as s,q as l,a1 as a}from"./framework-5866ffd3.js";const i={},e=a(`<h2>浮动</h2><p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p><ul><li><p>浮动</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">float</span><span class="token punctuation">:</span> none | left | right<span class="token punctuation">;</span>

none 不浮动（默认值）
left 左浮动
right 右浮动
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>什么是浮动？</p><p>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p>浮动最开始产生的原因是实现 <strong>图文环绕</strong>：<strong>浮动的元素不会遮挡文字，文字会被向右 推出。</strong></p></li><li><p>浮动特性</p><ul><li><strong>浮动元素会脱离标准流，不再保留原先的位置。</strong></li><li><strong>浮动的元素会一行内显示，可以设置宽高并且元素顶部对齐</strong><ul><li>注意：浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul></li><li><strong>浮动的元素会具有行内块元素的特性</strong></li><li><strong>浮动元素的大小根据内容来决定</strong></li><li><strong>浮动元素不能通过text-align:center或者margin:0 auto让浮动元素水平居中。</strong></li></ul></li><li><p><strong>浮动元素经常和标准流父级搭配使用</strong></p></li><li><p>浮动布局注意点</p><ul><li>浮动和标准流的父盒子搭配。 先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li><strong>一个元素浮动了，理论上其余的兄弟元素也要浮动。</strong> 一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</li></ul><p>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。</p></li></ul></li><li><p>清除浮动</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">clear</span><span class="token punctuation">:</span> left | right | both<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>为什么需要清除浮动? 由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p></li><li><p>本质：清除浮动的本质是清除浮动元素脱离标准流造成的影响：浮动的子标签无法撑开父盒子的高度</p></li><li><p>注意:</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li><li>父级有了高度，就不会影响下面的标准流了</li></ul></li><li><p>清除浮动策略是?</p><ul><li>闭合浮动。只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</li></ul></li></ul></li><li><p>清除浮动的多种方式</p><ol><li>直接设置父元素高度</li></ol><ul><li>优点：简单粗暴，方便</li><li>缺点：仅限于父元素的高度是固定的</li></ul><ol start="2"><li>额外标签法（隔墙法） 在父元素内容的最后添加一个块级元素，并给添加的块级元素设置clear: both，或者在父元素内容的最后添加一个&lt;br /&gt;标签。</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;div style=<span class="token string">&quot;clear:both&quot;</span>&gt;&lt;/div&gt;
&lt;br clear=<span class="token string">&#39;all&#39;</span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差</li><li>增加无意义的标签，不推荐使用。</li></ul><ol start="3"><li>给父元素添加 overflow 属性</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden | auto | scroll<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>可以给父级添加</p></li><li><p>优点：代码简洁</p></li><li><p>缺点：无法显示溢出的部分</p></li></ul><ol start="4"><li>单伪元素清除法</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>  //<span class="token punctuation">:</span><span class="token punctuation">:</span>after 方式是额外标签法的升级版，给父元素添加。
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
	<span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  //高度为0，不占任何空间。（浏览器兼容性，有些浏览器伪元素会有默认高度）
	<span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  //隐藏元素，继续占有原来位置，在网页中看不到伪元素，因为有些浏览器伪元素默认是一个圆点。
<span class="token punctuation">}</span>

<span class="token selector">.clearfix</span> <span class="token punctuation">{</span> <span class="token comment">/* IE6、7 专有 */</span>
  <span class="token comment">/*zoom是IE里的特有的属性，IE不支持伪元素，IE里zoom设置为1就是清除浮动*/</span>
	*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：没有增加标签，结构更简单，直接给父元素标签加类即可清除浮动。</li><li>缺点：照顾低版本浏览器</li><li>代表网站：百度、淘宝网、网易等</li></ul><ol start="5"><li>双伪元素清除法</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">//给父元素添加
.clearfix::before,
.clearfix::after</span> <span class="token punctuation">{</span> 
	<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>
	<span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
	*<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：代码更简洁</li><li>缺点：照顾低版本浏览器</li><li>父子标签都是块级，子级加margin会影响父级的位置。::before解决外边距塌陷问题</li></ul></li><li><p>（扩展补充）BFC的介绍</p><ul><li><p>块格式化上下文（Block Formatting Context）：BFC</p><ul><li>是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</li></ul></li><li><p>创建BFC方法：</p><ol><li><p>html标签是BFC盒子</p></li><li><p>浮动元素：float除none以外</p></li><li><p>行内块元素是BFC盒子</p><ul><li>display 为 inline-block、table-cells、flex</li></ul></li><li><p>overflow属性取值不为visible</p></li><li><p>绝对定位元素：position（absolute、fixed）</p></li></ol></li><li><p>BFC盒子常见特点：</p><ul><li>BFC盒子会默认包裹住内部子元素（标准流、浮动）------- 应用：清除浮动</li><li>BFC盒子本身与子元素之间不存在margin的塌陷现象------- 应用：解决margin的塌陷</li></ul></li></ul></li></ul>`,3),t=[e];function p(o,c){return s(),l("div",null,t)}const r=n(i,[["render",p],["__file","float.html.vue"]]);export{r as default};
