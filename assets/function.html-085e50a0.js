import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h2>函数</h2><h3 id="为什么需要函数" tabindex="-1"><a class="header-anchor" href="#为什么需要函数" aria-hidden="true">#</a> 为什么需要函数</h3><p>函数可以<strong>实现代码复用</strong>，提高开发效率。</p><h3 id="函数介绍" tabindex="-1"><a class="header-anchor" href="#函数介绍" aria-hidden="true">#</a> 函数介绍</h3><ul><li><p>函数：function，是被设计在特定时机可以重复执行特定任务的代码段</p></li><li><p>说明：</p><ul><li>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。</li></ul></li></ul><h3 id="函数使用" tabindex="-1"><a class="header-anchor" href="#函数使用" aria-hidden="true">#</a> 函数使用</h3><p>建议按照先声明后调用的顺序</p><ul><li><p>函数的声明语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> 函数名（参数）<span class="token punctuation">{</span>
	函数体：你希望能重复使用的代码
<span class="token punctuation">}</span>

注意：
	参数可以省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数的调用语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

注意：
	<span class="token function">声明（定义）的函数必须调用才会真正被执行，使用函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数名命名规范：</p><ul><li><p>和变量命名基本一致</p></li><li><p>尽量小驼峰式命名法</p></li><li><p>前缀应该为动词</p></li><li><p>命名建议：常用动词约定</p><table><thead><tr><th>动词</th><th>含义</th></tr></thead><tbody><tr><td>can</td><td>判断是否可以执行某个动作</td></tr><tr><td>has</td><td>判断是否含有某个值</td></tr><tr><td>is</td><td>判断是否为某个值</td></tr><tr><td>get</td><td>获取某个值</td></tr><tr><td>set</td><td>设置某个值</td></tr><tr><td>load</td><td>加载某些数据</td></tr></tbody></table></li></ul></li><li><p>循环和函数的区别</p><ul><li>循环：写完之后，立即执行</li><li>函数：只有调用，才会执行，并且只要声明的函数，可以在任意位置调用。</li></ul></li><li><p>函数的总结</p><ul><li>函数在声明之后,是不会执行里面的代码,需要手动的调用才行</li><li>函数一旦声明之后,就可以在任意位置调用</li><li>函数的调用没有次数限制,没有上限,完全取决于你的需求</li></ul></li></ul><h3 id="带参函数" tabindex="-1"><a class="header-anchor" href="#带参函数" aria-hidden="true">#</a> 带参函数</h3><p>函数传参的好处是可以极大的提高函数的灵活性，功能更加强大</p><p>如果在重复使用代码的时候，可能有一些会发生变化的数据，就要使用参数。</p><ul><li><p>声明语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> 函数名（形参）<span class="token punctuation">{</span>
	函数体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>函数名（实参）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>形参与实参</p><ul><li>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</li><li>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</li></ul><p>形参可以理解为是在这个函数内声明的变量，实参可以理解为是给这个变量赋值（比如num1=10）</p><p>实参&lt;形参的数量时，不会报错，但会给未传值的数据补一个undefined</p><p>实参&gt;形参的数量时，啥事没有，只会保留对应的个数，多的不赋值</p><ul><li><p>如何获取全部实参，可以使用函数内部提供的方法：<strong><code>arguments</code></strong> 功能就是帮助我们获取函数在调用的时候，全部的实参</p><ul><li><p>arguments是一个伪数组，有索引和长度</p></li><li><p>注意事项</p><ul><li>函数自带的，不需要声明</li><li><strong>只能在函数的内部使用</strong></li><li>可以得到函数在实际调用时全部的实参</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//当实参数量大于形参的数量时，赋值一一对应，多出的不赋值，通过函数内部自带的arguments实现获取全部实参</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  <span class="token keyword">let</span> sum<span class="token operator">=</span><span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sum<span class="token operator">+=</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment">//36</span>

<span class="token comment">//当实参数量小于形参的数量时，结果为NaN</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">/* 逻辑或 添加默认值*/</span>
  a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">0</span>
  b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">0</span>
  c <span class="token operator">=</span> c <span class="token operator">||</span> <span class="token number">0</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//4 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值" aria-hidden="true">#</a> 函数返回值</h3><p>当函数需要返回数据出去时，用return关键字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//return返回一个值</span>
<span class="token keyword">return</span> 返回值

<span class="token comment">//return返回多个值</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token number">1</span><span class="token punctuation">,</span>返回值<span class="token number">2</span><span class="token punctuation">]</span>

细节：
	在函数体中使用<span class="token keyword">return</span>关键字能将内部的执行结果交给函数外部使用
	函数内部只能出现<span class="token number">1</span>次<span class="token keyword">return</span>，并且<span class="token keyword">return</span>后面代码不会再被执行，所以<span class="token keyword">return</span>后面的数据不要换行写
	<span class="token keyword">return</span>会立即结束当前函数，后面的代码不在执行
	函数没有<span class="token keyword">return</span>，这种情况函数默认返回值为<span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>return的作用 <ul><li>修改函数的返回值</li><li>终止函数的运行</li></ul></li></ul><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><h4 id="_1-变量污染" tabindex="-1"><a class="header-anchor" href="#_1-变量污染" aria-hidden="true">#</a> 1. 变量污染</h4><ul><li>作用域就是变量和函数的有效范围，作用域可以防止变量污染 <ul><li>如果在全局作用域中，一个出现同名的变量或者函数，后面就会覆盖前面的变量</li><li>学名叫做：<strong>变量污染</strong> 同名变量 后面的覆盖前面的</li><li>为了防止变量污染，规定一个范围，把它们隔绝起来，那么这个范围就被称为作用域</li></ul></li></ul><h4 id="_2-函数作用域" tabindex="-1"><a class="header-anchor" href="#_2-函数作用域" aria-hidden="true">#</a> 2. 函数作用域</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效和有用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><ul><li><strong>全局作用域</strong>：全局有效，作用于所有代码执行的环境（整个script标签内部）或者一个独立的js文件</li><li><strong>局部作用域</strong>：局部有效，作用于函数内的代码环境，就是局部作用域。因为跟函数有关系，所以也称为函数作用域。</li><li><strong>块级作用域</strong>：{}内有效，块作用域由{}包括，if语句和for语句里面的{}等</li></ul><h4 id="_3-变量的作用域" tabindex="-1"><a class="header-anchor" href="#_3-变量的作用域" aria-hidden="true">#</a> 3. 变量的作用域</h4><p>在JavaScript中，根据作用域的不同，变量分为</p><ul><li><p><strong>全局变量</strong>：函数外部let的变量，全局变量在任何区域都可以访问和修改</p></li><li><p><strong>局部变量</strong>：函数内部let的变量，局部变量只能在当前函数内部访问和修改</p></li><li><p>块级变量：{}内部的let变量，let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问</p></li><li><p>变量有一个坑，特殊情况：</p><ul><li><strong>如果函数内部或者块级作用域内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐。</strong></li><li>但是有一种情况，函数内部的形参可以看做是局部变量，出了函数就无效了，不能使用。</li></ul></li></ul><h4 id="_4-变量的访问原则-作用域链" tabindex="-1"><a class="header-anchor" href="#_4-变量的访问原则-作用域链" aria-hidden="true">#</a> 4. 变量的访问原则-作用域链</h4><ul><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。 <ul><li>作用域链：采取就近原则的方式来查找变量最终的值</li></ul></li></ul><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><ul><li><p>具名函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//声明：</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//调用：</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>匿名函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//将匿名函数赋值给一个变量，并且通过变量名称进行调用，我们将这个称为函数表达式。</span>
语法：	
	<span class="token keyword">let</span> <span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		函数体
	<span class="token punctuation">}</span>

调用：
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>立即执行函数（自调用函数）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用场景：避免全局变量之间的污染</span>
语法<span class="token number">1</span><span class="token operator">:</span>
	<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

语法<span class="token number">2</span><span class="token operator">:</span>
	<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
不需要调用，立即执行
注意：多个立即执行函数要用；隔开，要不然会报错。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>推导过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>声明：
	<span class="token keyword">let</span> <span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

调用：
	<span class="token function">fn</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span>

推导：
	<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span>	 	
	<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span>	 
	<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>函数传值赋值小技巧</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//为形参添加默认值,防止NaN</span>
<span class="token comment">//形参不赋值，系统默认补一个undefined</span>
<span class="token comment">//数字+undefined  会报NaN</span>
声明：
	let fn<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
		x<span class="token operator">=</span>x<span class="token operator">||</span><span class="token number">0</span>
		y<span class="token operator">=</span>y<span class="token operator">||</span><span class="token number">0</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

或者
	let fn<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

调用：
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,29),i=[p];function l(c,o){return s(),a("div",null,i)}const r=n(t,[["render",l],["__file","function.html.vue"]]);export{r as default};
