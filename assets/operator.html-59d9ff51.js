import{_ as o,M as c,p as l,q as i,R as s,t as n,N as e,V as p,a1 as a}from"./framework-5866ffd3.js";const d={},r=a(`<h2>运算符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p>包括以下几种算术运算符。</p><table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>求和（字符串拼接）</td></tr><tr><td>-</td><td>求差</td></tr><tr><td>*</td><td>求积</td></tr><tr><td>/</td><td>求商</td></tr><tr><td>%</td><td>取模（取余数），开发中经常作为某个数字是否被整除</td></tr></tbody></table><p><code>+</code> 号不光有运算的功能，还有拼接字符串的功能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
	总结加号的用法
		数学运算：在数学上是加法运算，number
		字符串拼接：在加号两边，其中一边是字符串，那就会产生字符串拼接操作，数值类型转换为字符串类型
		转换类型：类数字的前面加+号，可以转化类型
*/</span>

<span class="token comment">// 数学运算</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 30</span>

<span class="token comment">// 字符串拼接</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//1010</span>

<span class="token comment">// 类型转换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),u=s("code",null,"-",-1),k=s("code",null,"*",-1),m=s("code",null,"/",-1),v=s("code",null,"%",-1),b=a(`<br><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>赋值</td></tr><tr><td>+=</td><td>加赋值 ( x += y ) == (x = x + y)</td></tr><tr><td>-=</td><td>减赋值 ( x -= y ) == (x = x - y)</td></tr><tr><td>*=</td><td>乘赋值 ( x *= y ) == (x = x * y)</td></tr><tr><td>/=</td><td>除赋值 ( x /= y ) == (x = x / y)</td></tr><tr><td>%=</td><td>取余赋值 ( x %= y ) == (x = x % y)</td></tr></tbody></table><p>将等号右边的值赋予给左边，要求左边必须是一个容器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;xiaosutongxue&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h3><h4 id="前置操作" tabindex="-1"><a class="header-anchor" href="#前置操作" aria-hidden="true">#</a> 前置操作</h4><p>前置操作会在表达式最先执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">++</span>n<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2</span>

<span class="token operator">--</span>n<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">17</span> <span class="token operator">+</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>	<span class="token comment">// 这里++n会在最先执行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 19 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>++n 就是 n=n+1的简写形式。</p><h4 id="后置操作" tabindex="-1"><a class="header-anchor" href="#后置操作" aria-hidden="true">#</a> 后置操作</h4><p>后置操作会在表达式最后执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">17</span> <span class="token operator">+</span> n<span class="token operator">++</span><span class="token punctuation">;</span>	<span class="token comment">// 这里n++会在最后执行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),h=a(`<ul><li>如果++在前，会执行先自增，然后使用自增后的的值进行运算。</li><li>如果++在后，会使用原来的值先参与运行，然后自身在进行自增。</li></ul><br><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>相等（只要值一样就是true，不管数据类型，开发中不常使用）</td></tr><tr><td>===</td><td>全等（开发常用，要求值和数据类型都一样）</td></tr><tr><td>!=</td><td>不等</td></tr><tr><td>!==</td><td>不全等（只有在类型相同的前提下，再去比较值）</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr></tbody></table><p>下面来体验不同类型的比较结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>比较结果为boolean类型，即只会得到 <code>true</code> 或 <code>false</code></li><li>字符串比较，是比较的字符对应的ASCII码（从左往右依次比较，如果第一位一样再比较第二位，以此类推）</li><li><strong>NaN不等于任何值，包括它本身，因此NaN不能参与运算</strong></li><li>尽量不要比较小数，因为小数有精度问题</li><li>不同类型之间比较会发生隐式转换，例如 3&gt;&#39;2&#39; //true <ul><li>最终把数据隐式转换成number类型再比较</li><li>开发中，如果进行准确的比较使用===</li></ul></li></ul><p><strong>= 和 == 和 === 怎么区别？</strong></p><ul><li>= 是赋值。</li><li>== 是判断，只要求值相等，不要求数据类型一样即可返回true。</li><li>=== 是全等，要求值和数据类型都一样返回的才是true。</li></ul><p>开发中，请使用 ===</p><p><strong>比较运算符返回的结果是什么？</strong></p><ul><li>结果只有2个， true 或者 false</li></ul><br><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th>符号</th><th>名称</th><th>读法</th><th>口诀</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与（和）</td><td>并且and</td><td>一假则假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者or</td><td>一真则真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反not</td><td>真变假，假变真</td></tr></tbody></table><h4 id="逻辑与" tabindex="-1"><a class="header-anchor" href="#逻辑与" aria-hidden="true">#</a> 逻辑与</h4><p>使用 <code>&amp;&amp;</code> 表示逻辑与，指符号两端都为 true 时表达式结果为 true。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;表达式成立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑或" tabindex="-1"><a class="header-anchor" href="#逻辑或" aria-hidden="true">#</a> 逻辑或</h4><p>使用 <code>||</code> 表示逻辑或，指符号两端有一方为 true，表达式即成立。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;表达式成立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑非" tabindex="-1"><a class="header-anchor" href="#逻辑非" aria-hidden="true">#</a> 逻辑非</h4><p>使用 <code>!</code> 表示逻辑非，即原来是 true 转变为 false，反之亦然。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;表达式成立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="短路运算" tabindex="-1"><a class="header-anchor" href="#短路运算" aria-hidden="true">#</a> 短路运算</h4><table><thead><tr><th>符号</th><th>短路条件</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>左边为假就短路</td></tr><tr><td>||</td><td>左边为真就短路</td></tr></tbody></table><ul><li>原因：通过左边能得到整个式子的结果，因此没必要再判断右边</li><li>运算结果：无论&amp;&amp;还是||，运算结果都是最后被执行的表达式值，一般用在变量赋值</li></ul><br><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>JavaScript也支持位运算符</p><table><thead><tr><th>位运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td></tr><tr><td>|</td><td>或</td></tr><tr><td>~</td><td>非</td></tr><tr><td>^</td><td>异或</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h3><p>JavaScript中支持delete运算符，可以删除对象里的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;xiaosutongxue&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">27</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// { name: &#39;xiaosutongxue&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h3><p>同时使用多个运算符编写程序时，会按着某种顺序先后执行，我们称为<strong>优先级</strong>。</p><p>JavaScript中优先级越高越先被执行，优先级相同时从左向右执行。</p><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>( )</td></tr><tr><td>2</td><td>一元运算符</td><td>++ -- !</td></tr><tr><td>3</td><td>算术运算符</td><td>先 * / % 后 + -</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !==</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先 &amp;&amp; 后 ||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table><ul><li>JavaScript中优先级越高越先被执行，优先级相同时以书写顺序从左向右执行 <ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li><li>乘、除、取余优先级相同，加、减优先级相同，且乘、除、取余优先级大于加、减</li><li>使用（）可以提升优先级</li></ul></li></ul>`,41);function g(f,x){const t=c("font");return l(),i("div",null,[r,s("p",null,[n("注意："),s("strong",null,[e(t,{color:"red"},{default:p(()=>[u,n(),k,n(),m,n(),v,n(" 都存在隐式转换")]),_:1})]),n("。")]),b,s("p",null,[n("注意："),s("strong",null,[e(t,{color:"red"},{default:p(()=>[n("前置自增和后置自增单独使用没有区别，如果参与运算就有区别了。")]),_:1})])]),h])}const j=o(d,[["render",g],["__file","operator.html.vue"]]);export{j as default};
