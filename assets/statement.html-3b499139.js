import{_ as o,M as i,p as c,q as l,R as e,t as n,N as t,V as p,a1 as s}from"./framework-5866ffd3.js";const r={},u=s(`<h2>语句</h2><h3 id="表达式和语句" tabindex="-1"><a class="header-anchor" href="#表达式和语句" aria-hidden="true">#</a> 表达式和语句</h3><p>表达式：表达式是一组代码的集合，JavaScript解释器会将其计算出一个结果。</p><p>语句：js整句或命令，js语句是以分号结束（可以省略）</p><p><strong>表达式和语句区别：</strong></p><ul><li><p>表达式计算出一个值，但语句用来自行使某件事发生（做什么事）</p><ul><li>表达式 3+4</li><li>语句：alert()、console.log()等</li></ul></li><li><p>其实某些情况，也可以把表达式理解为语句，因为它是在计算结果，也是做事。</p></li></ul><h3 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构" aria-hidden="true">#</a> 顺序结构</h3><p>代码从上往下执行就是顺序结构。</p><p>​</p><h3 id="分支结构" tabindex="-1"><a class="header-anchor" href="#分支结构" aria-hidden="true">#</a> 分支结构</h3><p>根据条件选择执行代码（<strong>通常用于判断区间</strong>）</p><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h4><p>小括号内的条件为true时，进入大括号里执行代码块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单分支：</span>
<span class="token keyword">if</span>（条件）<span class="token punctuation">{</span>
  代码块
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只有一条代码块，可以不用写 <code>{}</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;xiaosutongxue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// xiaosutongxue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),d=s(`<br><h4 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if...else...</h4><p>小括号内的条件为true时，执行代码块1，反之执行代码块2。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 双分支：</span>
<span class="token keyword">if</span>（条件）<span class="token punctuation">{</span>
  代码块<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  代码块<span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="if-else-if" tabindex="-1"><a class="header-anchor" href="#if-else-if" aria-hidden="true">#</a> if...else if...</h4><p>先判断条件1，若条件1满足则执行代码块1，其它不执行；</p><p>若条件1不满足则向下判断条件2，此时若条件2满足则执行代码块2，其它不执行；</p><p>若条件2依然不满足则继续向下判断，依次类推；</p><p>最终若以上条件都不满足，就执行else里的代码块n。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 多分支：</span>
<span class="token keyword">if</span>（条件<span class="token number">1</span>）<span class="token punctuation">{</span>
  代码块<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>（条件<span class="token number">2</span>）<span class="token punctuation">{</span>
  代码块<span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>（条件<span class="token number">3</span>）<span class="token punctuation">{</span>
  代码块<span class="token number">3</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  代码块n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h4><p>三元运算符是针对 <code>if</code> 判断的简写形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>条件 <span class="token operator">?</span> 满足条件执行的代码 <span class="token operator">:</span> 不满足条件执行的代码

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h4><p>可以将 <code>switch</code> 理解为 <code>if</code> 的另一种结构清晰的写法。</p><p>switch语句一般用于等值判断，不适合于区间判断。</p><p>首先找到跟小括号里表达式<strong>全等的</strong>case值，并执行里面对应的代码；若没有全等的则执行default里的代码，default语句是可以不写的。<code>break</code> 关键字会终止 <code>switch</code> 的执行，如果 <code>case</code> 执行后缺少 break 则接着执行后面的语句，直到遇到break或者switch语句执行结束，这就是case穿透。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一般用于等值判断</span>
<span class="token keyword">switch</span>（表达式）<span class="token punctuation">{</span>
	<span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>
		代码<span class="token number">1</span>
		<span class="token keyword">break</span>
	<span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>
		代码<span class="token number">2</span>
		<span class="token keyword">break</span>
	<span class="token keyword">default</span>：
		代码n
		<span class="token keyword">break</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：switch case一般需要配合break关键字使用，没有break会造成case穿透</p><h5 id="if-和-switch-的使用技巧" tabindex="-1"><a class="header-anchor" href="#if-和-switch-的使用技巧" aria-hidden="true">#</a> if 和 switch 的使用技巧</h5><ul><li>如果是判断区间用 if</li><li>如果是固定值用 switch</li></ul><br><h3 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h3><p>所谓循环就是指某段代码被重复执行的过程。</p><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><p>for 的三个参数可以都省略或取几个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span>起始条件<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span><span class="token punctuation">{</span>
	循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="for循环嵌套" tabindex="-1"><a class="header-anchor" href="#for循环嵌套" aria-hidden="true">#</a> for循环嵌套</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一个循环里再套一个循环，一般用在for循环里</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>外部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>内部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span><span class="token punctuation">{</span>
		循环体
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h4><p>while跟if语句很像，都要满足小括号里的条件，只有当条件为true时才会执行代码块</p><p>while大括号里代码执行完毕后不会跳出，而是继续回到小括号里判断条件是否满足，若满足则继续执行大括号里面的代码，然后回到小括号判断条件，直到括号内条件不满足，即跳出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">{</span>
	循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环的本质就是以某个变量为起始值，然后不断产生变化量，慢慢靠近终止条件的过程。所以，循环需要具备三要素：</p><ol><li>变量起始值</li><li>终止条件（没有终止条件，循环会一直执行，造成死循环）</li><li>变量变化量（用自增或者自减）</li></ol>`,39),k=s(`<h5 id="for循环和while循环的区别" tabindex="-1"><a class="header-anchor" href="#for循环和while循环的区别" aria-hidden="true">#</a> for循环和while循环的区别</h5><ul><li>如果明确了循环的次数，推荐使用for循环</li><li>如果不明确循环的次数，推荐使用while循环</li></ul><br><h4 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while" aria-hidden="true">#</a> do...while...</h4><p>后条件判断语句，无论条件是否为真都会先进行循环体，也就是说循环体至少执行一次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span><span class="token punctuation">{</span>
	循环体
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for...in...</h4><p>用于遍历对象的所有属性，<code>for...in...</code> 主要用于遍历对象，不建议用来遍历数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 遍历对象</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小苏同学&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;xiaosutongxue.com&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// key是对象的属性，obj[key]是对象中属性key对应的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 遍历数组</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;钢铁侠&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;绿巨人&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蜘蛛侠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// key是数组的索引，arr[key]是数组中索引key对应的值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 0 1 2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 钢铁侠 绿巨人 蜘蛛侠</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for...of...</h4><p>用来遍历 Arrays（数组）、Strings（字符串）、Maps（映射）、Sets（集合）等可迭代的数据结构。</p><p>与 <code>for...in...</code> 不同的是 <code>for...of...</code> 每次循环取其中的值而不是索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 遍历数组</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> iterator <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1 2 3</span>
<span class="token punctuation">}</span>

<span class="token comment">// 遍历字符串</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;xiaosutongxue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> iterator <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// x i a o s u t o n g x u e</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="continue与break" tabindex="-1"><a class="header-anchor" href="#continue与break" aria-hidden="true">#</a> continue与break</h4><p><code>continue</code> ：结束本次循环，继续下次循环。</p><p><code>break</code> ：</p><ol><li>结束switch结构</li><li>终止循环（跳出所在循环）</li></ol>`,20),v=s(`<br><h4 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> label</h4><p>标签（label）为程序定义位置，可以使用<code>continue/break</code>跳到该位置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// i+n 大于 15 时退出循环</span>
<span class="token literal-property property">outside</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inside</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span> inside<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> n <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span> outside<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(b,h){const a=i("font");return c(),l("div",null,[u,e("p",null,[n("注意："),t(a,{color:"red"},{default:p(()=>[n("小括号内的结果若不是布尔类型时，会发生隐式转换转为布尔类型")]),_:1}),n("。")]),d,e("p",null,[n("注意："),t(a,{color:"red"},{default:p(()=>[n("循环内的弹窗有断点的效果")]),_:1}),n("。")]),k,e("p",null,[n("注意："),t(a,{color:"red"},{default:p(()=>[n("循环体内 break后面的语句不再执行")]),_:1}),n("。")]),v])}const g=o(r,[["render",m],["__file","statement.html.vue"]]);export{g as default};
