import{_ as s,p as a,q as n,a1 as t}from"./framework-5866ffd3.js";const e={},o=t(`<h2 id="url的hash" tabindex="-1"><a class="header-anchor" href="#url的hash" aria-hidden="true">#</a> URL的hash</h2><p>URL的hash就是锚点(#)，本质上是改变window.location的href属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直接赋值location.hash来改变href，页面不刷新</span>
location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&#39;/home&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="html5的history模式" tabindex="-1"><a class="header-anchor" href="#html5的history模式" aria-hidden="true">#</a> HTML5的history模式</h2><p>history接口是HTML5新增的，它有5种模式改变URL而不刷新页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// history.pushState(data,title,url)</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// history.replaceState(data,title,url)</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// history.go(-1) 返回上一页</span>
<span class="token comment">// history.back() 等价于history.go(-1)</span>
<span class="token comment">// history.forward() 前进一页，等价于history.go(1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hash和history的区别" tabindex="-1"><a class="header-anchor" href="#hash和history的区别" aria-hidden="true">#</a> hash和history的区别</h2><p>Vue中的路由默认是hash模式，使用URL的hash模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p><p>history模式充分利用了 <code>history.pushState</code> API来完成 URL跳转而无需重新加载页面。</p><p>hash虽然出现在URL中，但不用包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</p><p>history模式提供了对历史记录进行修改的功能，只是当它们执行修改时，虽然改变了当前的URL，但浏览器不会立即向后端发送请求。history模式会出现404的情况，需要后台配置。</p><blockquote><p>404错误</p><p>1.hash模式下，仅hash符号之前的内容会被包含在请求中，如 http://www.xiaosutongxue.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回404错误；</p><p>2.history模式下，前端的url必须和实际向后端发起请求的url一致，如：http://www.xiaosutongxue.com/api/id，如果缺少对/api/id的路由处理，将返回404错误。</p></blockquote>`,12),i=[o];function p(c,r){return a(),n("div",null,i)}const h=s(e,[["render",p],["__file","router-mode.html.vue"]]);export{h as default};
