import{_ as p,p as s,q as a,a1 as n}from"./framework-5866ffd3.js";const e={},l=n(`<h1 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h1><h2 id="sql概述" tabindex="-1"><a class="header-anchor" href="#sql概述" aria-hidden="true">#</a> SQL概述</h2><h3 id="_1-什么是sql" tabindex="-1"><a class="header-anchor" href="#_1-什么是sql" aria-hidden="true">#</a> 1. 什么是SQL？</h3><p>​ <code>Structured Query Language</code> ：结构化查询语言</p><p>​ 其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><p>​</p><h3 id="_2-sql通用语法" tabindex="-1"><a class="header-anchor" href="#_2-sql通用语法" aria-hidden="true">#</a> 2. SQL通用语法</h3><ol><li><p>SQL 语句可以单行或多行书写，以分号结尾。</p></li><li><p>可使用空格和缩进来增强语句的可读性。</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p></li><li><p>三种注释</p><ul><li><p>单行注释</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 我是注释

# 我是注释（MySql特有）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多行注释</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>/* 
	注释 
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="_3-sql分类" tabindex="-1"><a class="header-anchor" href="#_3-sql分类" aria-hidden="true">#</a> 3. SQL分类</h3><ol><li>DDL（Data Definition Language）数据定义语言</li></ol><p>​ 用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</p><ol start="2"><li>DML(Data Manipulation Language)数据操作语言</li></ol><p>​ 用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</p><ol start="3"><li>DQL(Data Query Language)数据查询语言</li></ol><p>​ 用来查询数据库中表的记录(数据)。关键字：select, where 等</p><ol start="4"><li>DCL(Data Control Language)数据控制语言(了解)</li></ol><p>​ 用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</p><h4 id="ddl-操作数据库、表" tabindex="-1"><a class="header-anchor" href="#ddl-操作数据库、表" aria-hidden="true">#</a> DDL:操作数据库、表</h4><h5 id="_1-操作数据库-crud" tabindex="-1"><a class="header-anchor" href="#_1-操作数据库-crud" aria-hidden="true">#</a> 1. 操作数据库：CRUD</h5><ul><li><p>C（Create）：创建</p><ul><li><p>创建数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建数据库，判断不存在，再创建：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建数据库，并指定字符集</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> db4 <span class="token keyword">character</span> <span class="token keyword">set</span> gbk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>R（Retrieve）：查询</p><ul><li><p>查询所有数据库的名称:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查询某个数据库的字符集：查询某个数据库的创建语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>U（Update）：修改</p><ul><li><p>修改数据库的字符集</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">database</span> 数据库名称 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>D（Delete）：删除</p><ul><li><p>删除数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断数据库存在，存在再删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>使用数据库</p><ul><li><p>查询当前正在使用的数据库名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="_2-操作表" tabindex="-1"><a class="header-anchor" href="#_2-操作表" aria-hidden="true">#</a> 2. 操作表</h5><ul><li><p>C（Create）：创建</p><ul><li><p>创建表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>
	列名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>
	列名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  列名n 数据类型n
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#注意：最后一列，不需要加逗号（,）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>复制表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token operator">like</span> 被复制的表名<span class="token punctuation">;</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数据类型</p><ul><li>int：整数类型</li><li>double：小数类型</li><li>date:日期，只包含年月日，yyyy-MM-dd</li><li>datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</li><li>timestamp:时间错类型 包含年月日时分秒yyyy-MM-dd HH:mm:ss <ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li>varchar：字符串 <ul><li>zhangsan 8个字符 张三 2个字符</li></ul></li></ul></li></ul></li><li><p>R（Retrieve）：查询</p><ul><li><p>查询某个数据库中所有的表名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>查询表结构</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>U（Update）：修改</p><ul><li><p>修改表名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新的表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改表的字符集</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>添加一列</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>修改列名称 类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 列名 新列别 新数据类型<span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 新数据类型<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><p>​</p><ul><li><p>D（Delete）：删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="dml-增删改表中数据" tabindex="-1"><a class="header-anchor" href="#dml-增删改表中数据" aria-hidden="true">#</a> DML：增删改表中数据</h4><ul><li><p>添加数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>列名n<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span>

注意：
	<span class="token number">1.</span> 列名和值要一一对应。
	<span class="token number">2.</span> 如果表名后，不定义列名，则默认给所有列添加值
	<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token number">3.</span> 除了数字类型，其他类型需要使用引号<span class="token punctuation">(</span>单双都可以<span class="token punctuation">)</span>引起来
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span>

注意：
<span class="token number">1.</span> 如果不加条件，则删除表中所有记录。
<span class="token number">2.</span> 如果要删除所有记录
	<span class="token number">1.</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- 不推荐使用。有多少条记录就会执行多少次删除操作</span>
	<span class="token number">2.</span> <span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>

注意：
	<span class="token number">1.</span> 如果不加任何条件，则会将表中所有记录全部修改。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>​</p><h4 id="dql-查询表中的记录" tabindex="-1"><a class="header-anchor" href="#dql-查询表中的记录" aria-hidden="true">#</a> DQL：查询表中的记录</h4><p>* select * from 表名;</p><ul><li><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名列表
<span class="token keyword">where</span> 条件列表
<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段
<span class="token keyword">having</span> 分组之后的条件
<span class="token keyword">order</span> <span class="token keyword">by</span> 排序
<span class="token keyword">limit</span> 分页限定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基础查询</p><ul><li><p>多个字段的查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">select</span> 字段名<span class="token number">1</span>，字段名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名；
 
注意：
	如果查询所有字段，则可以使用<span class="token operator">*</span>来替代字段列表。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>去除重复：distinct</p></li><li><p>计算列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">1.</span>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）
<span class="token number">2.</span>ifnull<span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">,</span>表达式<span class="token number">2</span><span class="token punctuation">)</span>：<span class="token boolean">null</span>参与的运算，计算结果都为<span class="token boolean">null</span>
<span class="token number">3.</span>表达式<span class="token number">1</span>：哪个字段需要判断是否为<span class="token boolean">null</span>
<span class="token number">4.</span>如果该字段为<span class="token boolean">null</span>后的替换值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>起别名：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">as</span>：<span class="token keyword">as</span>也可以省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>条件查询</p></li></ul><p>​ \\1. where子句后跟条件</p><p>​ \\2. 运算符</p><p>​ * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p><p>​ * BETWEEN...AND</p><p>​ * IN( 集合)</p><p>​ * LIKE：模糊查询</p><p>​ * 占位符：</p><p>​ * _:单个任意字符</p><p>​ * %：多个任意字符</p><p>​ * IS NULL</p><p>​ * and 或 &amp;&amp;</p><p>​ * or 或 ||</p><p>​ * not 或 !</p><p>​</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询年龄大于20岁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询年龄等于20岁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询年龄不等于20岁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&lt;&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>             

<span class="token comment">-- 查询年龄大于等于20 小于等于30</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">AND</span> age <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span>            

<span class="token comment">-- 查询年龄22岁，18岁，25岁的信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">25</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询英语成绩为null</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment">-- 不对的 null值不能使用=（!=）判断</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>             

<span class="token comment">-- 查询英语成绩不为null</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询姓马的有哪些？ like</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;马%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询姓名第二个字是化的人</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;_化%&quot;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询姓名是3个字的人</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;___&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询姓名中包含德的人</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;%德%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="day3-mysql约束" tabindex="-1"><a class="header-anchor" href="#day3-mysql约束" aria-hidden="true">#</a> day3 MySQL约束</h2><h3 id="dql-查询语句" tabindex="-1"><a class="header-anchor" href="#dql-查询语句" aria-hidden="true">#</a> DQL:查询语句</h3><ul><li>排序查询</li></ul><p>​ * 语法：order by 子句</p><p>​ * order by 排序字段1 排序方式1 ， 排序字段2 排序方式2...</p><p>​</p><p>​ * 排序方式：</p><p>​ * ASC：升序，默认的。</p><p>​ * DESC：降序。</p><p>​</p><p>​ * 注意：</p><p>​ * 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</p><ul><li>聚合函数：将一列数据作为一个整体，进行纵向的计算。</li></ul><p>​ \\1. count：计算个数</p><p>​ \\1. 一般选择非空的列：主键</p><p>​ \\2. count(*)</p><p>​ \\2. max：计算最大值</p><p>​ \\3. min：计算最小值</p><p>​ \\4. sum：计算和</p><p>​ \\5. avg：计算平均值</p><p>​ * 注意：聚合函数的计算，排除null值。</p><p>​ 解决方案：</p><p>​ \\1. 选择不包含非空的列进行计算</p><p>​ \\2. IFNULL函数</p><p>​</p><ul><li>分组查询:</li></ul><p>​ \\1. 语法：group by 分组字段；</p><p>​ \\2. 注意：</p><p>​ \\1. 分组之后查询的字段：分组字段、聚合函数</p><p>​ \\2. where 和 having 的区别？</p><p>​ \\1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</p><p>​ \\2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。</p><p>​</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分</span>
<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
          

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数</span>

<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
          

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span>

<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
        

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span>

<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>          

<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数 <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\\4. 分页查询</p><p>​ \\1. 语法：limit 开始的索引,每页查询的条数;</p><p>​ \\2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</p><p>​ -- 每页显示3条记录</p><p>​ SELECT * FROM student LIMIT 0,3; -- 第1页</p><p>​ SELECT * FROM student LIMIT 3,3; -- 第2页</p><p>​ SELECT * FROM student LIMIT 6,3; -- 第3页</p><p>​ \\3. limit 是一个MySQL&quot;方言&quot;</p><h3 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h3><p>* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p><p>* 分类：</p><p>​ \\1. 主键约束：primary key</p><p>​ \\2. 非空约束：not null</p><p>​ \\3. 唯一约束：unique</p><p>​ \\4. 外键约束：foreign key</p><p>​</p><p>* 非空约束：not null，某一列的值不能为null</p><p>​ \\1. 创建表时添加约束</p><p>​ CREATE TABLE stu(</p><p>​ id INT,</p><p>​ NAME VARCHAR(20) NOT NULL -- name为非空</p><p>​ );</p><p>​ \\2. 创建表完后，添加非空约束</p><p>​ ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</p><p>​ \\3. 删除name的非空约束</p><p>​ ALTER TABLE stu MODIFY NAME VARCHAR(20);</p><p>* 唯一约束：unique，某一列的值不能重复</p><p>​ \\1. 注意：</p><p>​ * 唯一约束可以有NULL值，但是只能有一条记录为null</p><p>​ \\2. 在创建表时，添加唯一约束</p><p>​ CREATE TABLE stu(</p><p>​ id INT,</p><p>​ phone_number VARCHAR(20) UNIQUE -- 手机号</p><p>​ );</p><p>​ \\3. 删除唯一约束</p><p>​ ALTER TABLE stu DROP INDEX phone_number;</p><p>​ \\4. 在表创建完后，添加唯一约束</p><p>​ ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</p><p>​</p><p>主键约束：primary key。</p><p>​ \\1. 注意：</p><p>​ \\1. 含义：非空且唯一</p><p>​ \\2. 一张表只能有一个字段为主键</p><p>​ \\3. 主键就是表中记录的唯一标识</p><p>​</p><p>​ \\2. 在创建表时，添加主键约束</p><p>​ create table stu(</p><p>​ id int primary key,-- 给id添加主键约束</p><p>​ name varchar(20)</p><p>​ );</p><p>​</p><p>​ \\3. 删除主键</p><p>​ -- 错误 alter table stu modify id int ;</p><p>​ ALTER TABLE stu DROP PRIMARY KEY;</p><p>​</p><p>​ \\4. 创建完表后，添加主键</p><p>​ ALTER TABLE stu MODIFY id INT PRIMARY KEY;</p><p>​</p><p>​ \\5. 自动增长：</p><p>​ \\1. 概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p><p>​</p><p>​ \\2. 在创建表时，添加主键约束，并且完成主键自增长</p><p>​ create table stu(</p><p>​ id int primary key auto_increment,-- 给id添加主键约束</p><p>​ name varchar(20)</p><p>​ );</p><p>​</p><p>​ \\3. 删除自动增长</p><p>​ ALTER TABLE stu MODIFY id INT;</p><p>​ \\4. 添加自动增长</p><p>​ ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</p><p>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</p><p>​ \\1. 在创建表时，可以添加外键</p><p>​ * 语法：</p><p>​ create table 表名(</p><p>​ ....</p><p>​ 外键列</p><p>​ constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</p><p>​ );</p><p>​</p><p>​ \\2. 删除外键</p><p>​ ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</p><p>​</p><p>​ \\3. 创建表之后，添加外键</p><p>​ ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</p><p>​ \\4. 级联操作</p><p>​ \\1. 添加级联操作</p><p>​ 语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称</p><p>​ FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ;</p><p>​ \\2. 分类：</p><p>​ \\1. 级联更新：ON UPDATE CASCADE</p><p>​ \\2. 级联删除：ON DELETE CASCADE</p><h3 id="多表之间的关系" tabindex="-1"><a class="header-anchor" href="#多表之间的关系" aria-hidden="true">#</a> 多表之间的关系</h3><p>​ \\1. 分类：</p><p>​ \\1. 一对一(了解)：</p><p>​ * 如：人和身份证</p><p>​ * 分析：一个人只有一个身份证，一个身份证只能对应一个人</p><p>​ \\2. 一对多(多对一)：</p><p>​ * 如：部门和员工</p><p>​ * 分析：一个部门有多个员工，一个员工只能对应一个部门</p><p>​ \\3. 多对多：</p><p>​ * 如：学生和课程</p><p>​ * 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p><p>​ \\2. 实现关系：</p><p>​ \\1. 一对多(多对一)：</p><p>​ * 如：部门和员工</p><p>​ * 实现方式：在多的一方建立外键，指向一的一方的主键。</p><p>​ \\2. 多对多：</p><p>​ * 如：学生和课程</p><p>​ * 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</p><p>​ \\3. 一对一(了解)：</p><p>​ * 如：人和身份证</p><p>​ * 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</p><p>​</p><p>​ \\3. 案例</p><p>​ -- 创建旅游线路分类表 tab_category</p><p>​ -- cid 旅游线路分类主键，自动增长</p><p>​ -- cname 旅游线路分类名称非空，唯一，字符串 100</p><p>​ CREATE TABLE tab_category (</p><p>​ cid INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ cname VARCHAR(100) NOT NULL UNIQUE</p><p>​ );</p><p>​</p><p>​ -- 创建旅游线路表 tab_route</p><p>​ /*</p><p>​ rid 旅游线路主键，自动增长</p><p>​ rname 旅游线路名称非空，唯一，字符串 100</p><p>​ price 价格</p><p>​ rdate 上架时间，日期类型</p><p>​ cid 外键，所属分类</p><p>​ */</p><p>​ CREATE TABLE tab_route(</p><p>​ rid INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ rname VARCHAR(100) NOT NULL UNIQUE,</p><p>​ price DOUBLE,</p><p>​ rdate DATE,</p><p>​ cid INT,</p><p>​ FOREIGN KEY (cid) REFERENCES tab_category(cid)</p><p>​ );</p><p>​</p><p>​ /*创建用户表 tab_user</p><p>​ uid 用户主键，自增长</p><p>​ username 用户名长度 100，唯一，非空</p><p>​ password 密码长度 30，非空</p><p>​ name 真实姓名长度 100</p><p>​ birthday 生日</p><p>​ sex 性别，定长字符串 1</p><p>​ telephone 手机号，字符串 11</p><p>​ email 邮箱，字符串长度 100</p><p>​ */</p><p>​ CREATE TABLE tab_user (</p><p>​ uid INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ username VARCHAR(100) UNIQUE NOT NULL,</p><p>​ PASSWORD VARCHAR(30) NOT NULL,</p><p>​ NAME VARCHAR(100),</p><p>​ birthday DATE,</p><p>​ sex CHAR(1) DEFAULT &#39;男&#39;,</p><p>​ telephone VARCHAR(11),</p><p>​ email VARCHAR(100)</p><p>​ );</p><p>​</p><p>​ /*</p><p>​ 创建收藏表 tab_favorite</p><p>​ rid 旅游线路 id，外键</p><p>​ date 收藏时间</p><p>​ uid 用户 id，外键</p><p>​ rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</p><p>​ */</p><p>​ CREATE TABLE tab_favorite (</p><p>​ rid INT, -- 线路id</p><p>​ DATE DATETIME,</p><p>​ uid INT, -- 用户id</p><p>​ -- 创建复合主键</p><p>​ PRIMARY KEY(rid,uid), -- 联合主键</p><p>​ FOREIGN KEY (rid) REFERENCES tab_route(rid),</p><p>​ FOREIGN KEY(uid) REFERENCES tab_user(uid)</p><p>​ );</p><p>​ 范式</p><p>​ * 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p><p>​</p><p>​ 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>​ 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><p>​</p><p>​ * 分类：</p><p>​ \\1. 第一范式（1NF）：每一列都是不可分割的原子数据项</p><p>​ \\2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><p>​ * 几个概念：</p><p>​ \\1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</p><p>​ 例如：学号--&gt;姓名。 （学号，课程名称） --&gt; 分数</p><p>​ \\2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。</p><p>​ 例如：（学号，课程名称） --&gt; 分数</p><p>​ \\3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。</p><p>​ 例如：（学号，课程名称） -- &gt; 姓名</p><p>​ \\4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</p><p>​ 例如：学号--&gt;系名，系名--&gt;系主任</p><p>​ \\5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</p><p>​ 例如：该表中码为：（学号，课程名称）</p><p>​ * 主属性：码属性组中的所有属性</p><p>​ * 非主属性：除过码属性组的属性</p><p>​</p><p>​ \\3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p><h3 id="数据库的备份和还原" tabindex="-1"><a class="header-anchor" href="#数据库的备份和还原" aria-hidden="true">#</a> 数据库的备份和还原</h3><p>\\1. 命令行：</p><p>​ * 语法：</p><p>​ * 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</p><p>​ * 还原：</p><p>​ \\1. 登录数据库</p><p>​ \\2. 创建数据库</p><p>​ \\3. 使用数据库</p><p>​ \\4. 执行文件。source 文件路径</p><p>\\2. 图形化工具：</p><h2 id="day4-mysql多表-事务" tabindex="-1"><a class="header-anchor" href="#day4-mysql多表-事务" aria-hidden="true">#</a> day4 MySQL多表&amp;事务</h2><h3 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询：</h3><p>* 查询语法：</p><p>​ select</p><p>​ 列名列表</p><p>​ from</p><p>​ 表名列表</p><p>​ where....</p><p>* 准备sql</p><p>​ # 创建部门表</p><p>​ CREATE TABLE dept(</p><p>​ id INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ NAME VARCHAR(20)</p><p>​ );</p><p>​ INSERT INTO dept (NAME) VALUES (&#39;开发部&#39;),(&#39;市场部&#39;),(&#39;财务部&#39;);</p><p>​ # 创建员工表</p><p>​ CREATE TABLE emp (</p><p>​ id INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ NAME VARCHAR(10),</p><p>​ gender CHAR(1), -- 性别</p><p>​ salary DOUBLE, -- 工资</p><p>​ join_date DATE, -- 入职日期</p><p>​ dept_id INT,</p><p>​ FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)</p><p>​ );</p><p>​ INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1);</p><p>​ INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2);</p><p>​ INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;唐僧&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2);</p><p>​ INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3);</p><p>​ INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1);</p><p>* 笛卡尔积：</p><p>​ * 有两个集合A,B .取这两个集合的所有组成情况。</p><p>​ * 要完成多表查询，需要消除无用的数据</p><p>* 多表查询的分类：</p><p>​ \\1. 内连接查询：</p><p>​ \\1. 隐式内连接：使用where条件消除无用数据</p><p>​ * 例子：</p><p>​ -- 查询所有员工信息和对应的部门信息</p><p>​ SELECT * FROM emp,dept WHERE emp.<code>dept_id</code> = dept.<code>id</code>;</p><p>​</p><p>​ -- 查询员工表的名称，性别。部门表的名称</p><p>​ SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.<code>dept_id</code> = dept.<code>id</code>;</p><p>​</p><p>​ SELECT</p><p>​ t1.name, -- 员工表的姓名</p><p>​ t1.gender,-- 员工表的性别</p><p>​ t2.name -- 部门表的名称</p><p>​ FROM</p><p>​ emp t1,</p><p>​ dept t2</p><p>​ WHERE</p><p>​ t1.<code>dept_id</code> = t2.<code>id</code>;</p><p>​</p><p>​ \\2. 显式内连接：</p><p>​ * 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</p><p>​ * 例如：</p><p>​ * SELECT * FROM emp INNER JOIN dept ON emp.<code>dept_id</code> = dept.<code>id</code>;</p><p>​ * SELECT * FROM emp JOIN dept ON emp.<code>dept_id</code> = dept.<code>id</code>;</p><p>​ \\3. 内连接查询：</p><p>​ \\1. 从哪些表中查询数据</p><p>​ \\2. 条件是什么</p><p>​ \\3. 查询哪些字段</p><p>​ \\2. 外链接查询：</p><p>​ \\1. 左外连接：</p><p>​ * 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p><p>​ * 查询的是左表所有数据以及其交集部分。</p><p>​ * 例子：</p><p>​ -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</p><p>​ SELECT t1.*,t2.<code>name</code> FROM emp t1 LEFT JOIN dept t2 ON t1.<code>dept_id</code> = t2.<code>id</code>;</p><p>​ \\2. 右外连接：</p><p>​ * 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p><p>​ * 查询的是右表所有数据以及其交集部分。</p><p>​ * 例子：</p><p>​ SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.<code>dept_id</code> = t2.<code>id</code>;</p><p>​ \\3. 子查询：</p><p>​ * 概念：查询中嵌套查询，称嵌套查询为子查询。</p><p>​ -- 查询工资最高的员工信息</p><p>​ -- 1 查询最高的工资是多少 9000</p><p>​ SELECT MAX(salary) FROM emp;</p><p>​</p><p>​ -- 2 查询员工信息，并且工资等于9000的</p><p>​ SELECT * FROM emp WHERE emp.<code>salary</code> = 9000;</p><p>​</p><p>​ -- 一条sql就完成这个操作。子查询</p><p>​ SELECT * FROM emp WHERE emp.<code>salary</code> = (SELECT MAX(salary) FROM emp);</p><p>​ * 子查询不同情况</p><p>​ \\1. 子查询的结果是单行单列的：</p><p>​ * 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p><p>​ *</p><p>​ -- 查询员工工资小于平均工资的人</p><p>​ SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</p><p>​ \\2. 子查询的结果是多行单列的：</p><p>​ * 子查询可以作为条件，使用运算符in来判断</p><p>​ -- 查询&#39;财务部&#39;和&#39;市场部&#39;所有的员工信息</p><p>​ SELECT id FROM dept WHERE NAME = &#39;财务部&#39; OR NAME = &#39;市场部&#39;;</p><p>​ SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</p><p>​ -- 子查询</p><p>​ SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#39;财务部&#39; OR NAME = &#39;市场部&#39;);</p><p>​ \\3. 子查询的结果是多行多列的：</p><p>​ * 子查询可以作为一张虚拟表参与查询</p><p>​ -- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</p><p>​ -- 子查询</p><p>​ SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.<code>join_date</code> &gt; &#39;2011-11-11&#39;) t2</p><p>​ WHERE t1.id = t2.dept_id;</p><p>​</p><p>​ -- 普通内连接</p><p>​ SELECT * FROM emp t1,dept t2 WHERE t1.<code>dept_id</code> = t2.<code>id</code> AND t1.<code>join_date</code> &gt; &#39;2011-11-11&#39;</p><p>​ * 多表查询练习</p><p>​ -- 部门表</p><p>​ CREATE TABLE dept (</p><p>​ id INT PRIMARY KEY PRIMARY KEY, -- 部门id</p><p>​ dname VARCHAR(50), -- 部门名称</p><p>​ loc VARCHAR(50) -- 部门所在地</p><p>​ );</p><p>​</p><p>​ -- 添加4个部门</p><p>​ INSERT INTO dept(id,dname,loc) VALUES</p><p>​ (10,&#39;教研部&#39;,&#39;北京&#39;),</p><p>​ (20,&#39;学工部&#39;,&#39;上海&#39;),</p><p>​ (30,&#39;销售部&#39;,&#39;广州&#39;),</p><p>​ (40,&#39;财务部&#39;,&#39;深圳&#39;);</p><p>​</p><p>​</p><p>​</p><p>​ -- 职务表，职务名称，职务描述</p><p>​ CREATE TABLE job (</p><p>​ id INT PRIMARY KEY,</p><p>​ jname VARCHAR(20),</p><p>​ description VARCHAR(50)</p><p>​ );</p><p>​</p><p>​ -- 添加4个职务</p><p>​ INSERT INTO job (id, jname, description) VALUES</p><p>​ (1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39;),</p><p>​ (2, &#39;经理&#39;, &#39;管理部门员工&#39;),</p><p>​ (3, &#39;销售员&#39;, &#39;向客人推销产品&#39;),</p><p>​ (4, &#39;文员&#39;, &#39;使用办公软件&#39;);</p><p>​</p><p>​</p><p>​</p><p>​ -- 员工表</p><p>​ CREATE TABLE emp (</p><p>​ id INT PRIMARY KEY, -- 员工id</p><p>​ ename VARCHAR(50), -- 员工姓名</p><p>​ job_id INT, -- 职务id</p><p>​ mgr INT , -- 上级领导</p><p>​ joindate DATE, -- 入职日期</p><p>​ salary DECIMAL(7,2), -- 工资</p><p>​ bonus DECIMAL(7,2), -- 奖金</p><p>​ dept_id INT, -- 所在部门编号</p><p>​ CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</p><p>​ CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</p><p>​ );</p><p>​</p><p>​ -- 添加员工</p><p>​ INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES</p><p>​ (1001,&#39;孙悟空&#39;,4,1004,&#39;2000-12-17&#39;,&#39;8000.00&#39;,NULL,20),</p><p>​ (1002,&#39;卢俊义&#39;,3,1006,&#39;2001-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30),</p><p>​ (1003,&#39;林冲&#39;,3,1006,&#39;2001-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30),</p><p>​ (1004,&#39;唐僧&#39;,2,1009,&#39;2001-04-02&#39;,&#39;29750.00&#39;,NULL,20),</p><p>​ (1005,&#39;李逵&#39;,4,1006,&#39;2001-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30),</p><p>​ (1006,&#39;宋江&#39;,2,1009,&#39;2001-05-01&#39;,&#39;28500.00&#39;,NULL,30),</p><p>​ (1007,&#39;刘备&#39;,2,1009,&#39;2001-09-01&#39;,&#39;24500.00&#39;,NULL,10),</p><p>​ (1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20),</p><p>​ (1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-11-17&#39;,&#39;50000.00&#39;,NULL,10),</p><p>​ (1010,&#39;吴用&#39;,3,1006,&#39;2001-09-08&#39;,&#39;15000.00&#39;,&#39;0.00&#39;,30),</p><p>​ (1011,&#39;沙僧&#39;,4,1004,&#39;2007-05-23&#39;,&#39;11000.00&#39;,NULL,20),</p><p>​ (1012,&#39;李逵&#39;,4,1006,&#39;2001-12-03&#39;,&#39;9500.00&#39;,NULL,30),</p><p>​ (1013,&#39;小白龙&#39;,4,1004,&#39;2001-12-03&#39;,&#39;30000.00&#39;,NULL,20),</p><p>​ (1014,&#39;关羽&#39;,4,1007,&#39;2002-01-23&#39;,&#39;13000.00&#39;,NULL,10);</p><p>​</p><p>​</p><p>​</p><p>​ -- 工资等级表</p><p>​ CREATE TABLE salarygrade (</p><p>​ grade INT PRIMARY KEY, -- 级别</p><p>​ losalary INT, -- 最低工资</p><p>​ hisalary INT -- 最高工资</p><p>​ );</p><p>​</p><p>​ -- 添加5个工资等级</p><p>​ INSERT INTO salarygrade(grade,losalary,hisalary) VALUES</p><p>​ (1,7000,12000),</p><p>​ (2,12010,14000),</p><p>​ (3,14010,20000),</p><p>​ (4,20010,30000),</p><p>​ (5,30010,99990);</p><p>​</p><p>​ -- 需求：</p><p>​</p><p>​ -- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p><p>​ /*</p><p>​ 分析：</p><p>​ 1.员工编号，员工姓名，工资，需要查询emp表 职务名称，职务描述 需要查询job表</p><p>​ 2.查询条件 emp.job_id = job.id</p><p>​</p><p>​ */</p><p>​ SELECT</p><p>​ t1.<code>id</code>, -- 员工编号</p><p>​ t1.<code>ename</code>, -- 员工姓名</p><p>​ t1.<code>salary</code>,-- 工资</p><p>​ t2.<code>jname</code>, -- 职务名称</p><p>​ t2.<code>description</code> -- 职务描述</p><p>​ FROM</p><p>​ emp t1, job t2</p><p>​ WHERE</p><p>​ t1.<code>job_id</code> = t2.<code>id</code>;</p><p>​</p><p>​</p><p>​</p><p>​ -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p><p>​ /*</p><p>​ 分析：</p><p>​ \\1. 员工编号，员工姓名，工资 emp 职务名称，职务描述 job 部门名称，部门位置 dept</p><p>​ \\2. 条件： emp.job_id = job.id and emp.dept_id = dept.id</p><p>​ */</p><p>​</p><p>​ SELECT</p><p>​ t1.<code>id</code>, -- 员工编号</p><p>​ t1.<code>ename</code>, -- 员工姓名</p><p>​ t1.<code>salary</code>,-- 工资</p><p>​ t2.<code>jname</code>, -- 职务名称</p><p>​ t2.<code>description</code>, -- 职务描述</p><p>​ t3.<code>dname</code>, -- 部门名称</p><p>​ t3.<code>loc</code> -- 部门位置</p><p>​ FROM</p><p>​ emp t1, job t2,dept t3</p><p>​ WHERE</p><p>​ t1.<code>job_id</code> = t2.<code>id</code> AND t1.<code>dept_id</code> = t3.<code>id</code>;</p><p>​</p><p>​ -- 3.查询员工姓名，工资，工资等级</p><p>​ /*</p><p>​ 分析：</p><p>​ 1.员工姓名，工资 emp 工资等级 salarygrade</p><p>​ 2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary</p><p>​ emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</p><p>​ */</p><p>​ SELECT</p><p>​ t1.ename ,</p><p>​ t1.<code>salary</code>,</p><p>​ t2.*</p><p>​ FROM emp t1, salarygrade t2</p><p>​ WHERE t1.<code>salary</code> BETWEEN t2.<code>losalary</code> AND t2.<code>hisalary</code>;</p><p>​</p><p>​</p><p>​</p><p>​ -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p><p>​ /*</p><p>​ 分析：</p><p>​ \\1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept 工资等级 salarygrade</p><p>​ \\2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</p><p>​</p><p>​ */</p><p>​ SELECT</p><p>​ t1.<code>ename</code>,</p><p>​ t1.<code>salary</code>,</p><p>​ t2.<code>jname</code>,</p><p>​ t2.<code>description</code>,</p><p>​ t3.<code>dname</code>,</p><p>​ t3.<code>loc</code>,</p><p>​ t4.<code>grade</code></p><p>​ FROM</p><p>​ emp t1,job t2,dept t3,salarygrade t4</p><p>​ WHERE</p><p>​ t1.<code>job_id</code> = t2.<code>id</code></p><p>​ AND t1.<code>dept_id</code> = t3.<code>id</code></p><p>​ AND t1.<code>salary</code> BETWEEN t4.<code>losalary</code> AND t4.<code>hisalary</code>;</p><p>​</p><p>​</p><p>​</p><p>​ -- 5.查询出部门编号、部门名称、部门位置、部门人数</p><p>​</p><p>​ /*</p><p>​ 分析：</p><p>​ 1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表</p><p>​ 2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</p><p>​ 3.使用子查询将第2步的查询结果和dept表进行关联查询</p><p>​ */</p><p>​ SELECT</p><p>​ t1.<code>id</code>,t1.<code>dname</code>,t1.<code>loc</code> , t2.total</p><p>​ FROM</p><p>​ dept t1,</p><p>​ (SELECT</p><p>​ dept_id,COUNT(id) total</p><p>​ FROM</p><p>​ emp</p><p>​ GROUP BY dept_id) t2</p><p>​ WHERE t1.<code>id</code> = t2.dept_id;</p><p>​</p><p>​</p><p>​ -- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</p><p>​</p><p>​ /*</p><p>​ 分析：</p><p>​ 1.姓名 emp， 直接上级的姓名 emp</p><p>​ * emp表的id 和 mgr 是自关联</p><p>​ 2.条件 emp.id = emp.mgr</p><p>​ 3.查询左表的所有数据，和 交集数据</p><p>​ * 使用左外连接查询</p><p>​ */</p><p>​ /*</p><p>​ select</p><p>​ t1.ename,</p><p>​ t1.mgr,</p><p>​ t2.<code>id</code>,</p><p>​ t2.ename</p><p>​ from emp t1, emp t2</p><p>​ where t1.mgr = t2.<code>id</code>;</p><p>​</p><p>​ */</p><p>​</p><p>​ SELECT</p><p>​ t1.ename,</p><p>​ t1.mgr,</p><p>​ t2.<code>id</code>,</p><p>​ t2.<code>ename</code></p><p>​ FROM emp t1</p><p>​ LEFT JOIN emp t2</p><p>​ ON t1.<code>mgr</code> = t2.<code>id</code>;</p><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><p>\\1. 事务的基本介绍</p><p>​ \\1. 概念：</p><p>​ * 如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p><p>​</p><p>​ \\2. 操作：</p><p>​ \\1. 开启事务： start transaction;</p><p>​ \\2. 回滚：rollback;</p><p>​ \\3. 提交：commit;</p><p>​ \\3. 例子：</p><p>​ CREATE TABLE account (</p><p>​ id INT PRIMARY KEY AUTO_INCREMENT,</p><p>​ NAME VARCHAR(10),</p><p>​ balance DOUBLE</p><p>​ );</p><p>​ -- 添加数据</p><p>​ INSERT INTO account (NAME, balance) VALUES (&#39;zhangsan&#39;, 1000), (&#39;lisi&#39;, 1000);</p><p>​</p><p>​</p><p>​ SELECT * FROM account;</p><p>​ UPDATE account SET balance = 1000;</p><p>​ -- 张三给李四转账 500 元</p><p>​</p><p>​ -- 0. 开启事务</p><p>​ START TRANSACTION;</p><p>​ -- 1. 张三账户 -500</p><p>​</p><p>​ UPDATE account SET balance = balance - 500 WHERE NAME = &#39;zhangsan&#39;;</p><p>​ -- 2. 李四账户 +500</p><p>​ -- 出错了...</p><p>​ UPDATE account SET balance = balance + 500 WHERE NAME = &#39;lisi&#39;;</p><p>​</p><p>​ -- 发现执行没有问题，提交事务</p><p>​ COMMIT;</p><p>​</p><p>​ -- 发现出问题了，回滚事务</p><p>​ ROLLBACK;</p><p>​ \\4. MySQL数据库中事务默认自动提交</p><p>​</p><p>​ * 事务提交的两种方式：</p><p>​ * 自动提交：</p><p>​ * mysql就是自动提交的</p><p>​ * 一条DML(增删改)语句会自动提交一次事务。</p><p>​ * 手动提交：</p><p>​ * Oracle 数据库默认是手动提交事务</p><p>​ * 需要先开启事务，再提交</p><p>​ * 修改事务的默认提交方式：</p><p>​ * 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交 0 代表手动提交</p><p>​ * 修改默认提交方式： set @@autocommit = 0;</p><p>\\2. 事务的四大特征：</p><p>​ \\1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</p><p>​ \\2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</p><p>​ \\3. 隔离性：多个事务之间。相互独立。</p><p>​ \\4. 一致性：事务操作前后，数据总量不变</p><p>\\3. 事务的隔离级别（了解）</p><p>​ * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p><p>​ * 存在问题：</p><p>​ \\1. 脏读：一个事务，读取到另一个事务中没有提交的数据</p><p>​ \\2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</p><p>​ \\3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</p><p>​ * 隔离级别：</p><p>​ \\1. read uncommitted：读未提交</p><p>​ * 产生的问题：脏读、不可重复读、幻读</p><p>​ \\2. read committed：读已提交 （Oracle）</p><p>​ * 产生的问题：不可重复读、幻读</p><p>​ \\3. repeatable read：可重复读 （MySQL默认）</p><p>​ * 产生的问题：幻读</p><p>​ \\4. serializable：串行化</p><p>​ * 可以解决所有的问题</p><p>​ * 注意：隔离级别从小到大安全性越来越高，但是效率越来越低</p><p>​ * 数据库查询隔离级别：</p><p>​ * select @@tx_isolation;</p><p>​ * 数据库设置隔离级别：</p><p>​ * set global transaction isolation level 级别字符串;</p><p>​ * 演示：</p><p>​ set global transaction isolation level read uncommitted;</p><p>​ start transaction;</p><p>​ -- 转账操作</p><p>​ update account set balance = balance - 500 where id = 1;</p><p>​ update account set balance = balance + 500 where id = 2;</p><h3 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl" aria-hidden="true">#</a> DCL</h3><p>* SQL分类：</p><p>​ \\1. DDL：操作数据库和表</p><p>​ \\2. DML：增删改表中数据</p><p>​ \\3. DQL：查询表中数据</p><p>​ \\4. DCL：管理用户，授权</p><p>* DBA：数据库管理员</p><p>* DCL：管理用户，授权</p><p>​ \\1. 管理用户</p><p>​ \\1. 添加用户：</p><p>​ * 语法：CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</p><p>​ \\2. 删除用户：</p><p>​ * 语法：DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</p><p>​ \\3. 修改用户密码：</p><p>​</p><p>​ UPDATE USER SET PASSWORD = PASSWORD(&#39;新密码&#39;) WHERE USER = &#39;用户名&#39;;</p><p>​ UPDATE USER SET PASSWORD = PASSWORD(&#39;abc&#39;) WHERE USER = &#39;lisi&#39;;</p><p>​</p><p>​ SET PASSWORD FOR &#39;用户名&#39;@&#39;主机名&#39; = PASSWORD(&#39;新密码&#39;);</p><p>​ SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;123&#39;);</p><p>​ * mysql中忘记了root用户的密码？</p><p>​ \\1. cmd -- &gt; net stop mysql 停止mysql服务</p><p>​ * 需要管理员运行该cmd</p><p>​ \\2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables</p><p>​ \\3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</p><p>​ \\4. use mysql;</p><p>​ \\5. update user set password = password(&#39;你的新密码&#39;) where user = &#39;root&#39;;</p><p>​ \\6. 关闭两个窗口</p><p>​ \\7. 打开任务管理器，手动结束mysqld.exe 的进程</p><p>​ \\8. 启动mysql服务</p><p>​ \\9. 使用新密码登录。</p><p>​ \\4. 查询用户：</p><p>​ -- 1. 切换到mysql数据库</p><p>​ USE myql;</p><p>​ -- 2. 查询user表</p><p>​ SELECT * FROM USER;</p><p>​</p><p>​ * 通配符： % 表示可以在任意主机使用用户登录数据库</p><p>​ \\2. 权限管理：</p><p>​ \\1. 查询权限：</p><p>​ -- 查询权限</p><p>​ SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</p><p>​ SHOW GRANTS FOR &#39;lisi&#39;@&#39;%&#39;;</p><p>​ \\2. 授予权限：</p><p>​ -- 授予权限</p><p>​ grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</p><p>​ -- 给张三用户授予所有权限，在任意数据库任意表上</p><p>​</p><p>​ GRANT ALL ON <em>.</em> TO &#39;zhangsan&#39;@&#39;localhost&#39;;</p><p>​ \\3. 撤销权限：</p><p>​ -- 撤销权限：</p><p>​ revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</p><p>​ REVOKE UPDATE ON db3.<code>account</code> FROM &#39;lisi&#39;@&#39;%&#39;;</p>`,742),t=[l];function o(d,i){return s(),a("div",null,t)}const r=p(e,[["render",o],["__file","SQL.html.vue"]]);export{r as default};
