import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},e=t(`<h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h2><p>URL的hash就是锚点(#)，本质上是改变window.location的href属性</p><p>采用的是window.onhashchange=()=&gt;{}实现的。在地址栏会出现#号，虽然看着不美观，但是不会包含在http请求中，对后端也没有任何影响</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 直接赋值location.hash来改变href，页面不刷新</span>
location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&#39;/home&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p>history模式，利用了 HTML5 新增的 pushState() 和 replaceState() 方法，在原有的back、forward、go 的基础上，添加对历史记录修改的功能。history模式下有一个问题，就是当页面刷新时，如果后端没有做处理的话，就会因找不到资源而报404错误。</p><p>history接口是HTML5新增的，它有5种模式改变URL而不刷新页面</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// history.pushState(data,title,url)</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// history.replaceState(data,title,url)</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>

history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 返回上一页</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等价于history.go(-1)</span>
history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//前进一页，等价于history.go(1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hash和history的区别" tabindex="-1"><a class="header-anchor" href="#hash和history的区别" aria-hidden="true">#</a> hash和history的区别</h2><p>开发环境下，二者没有区别，都不会重新加载页面 hash虽然看着不美观，但是兼容性好 history虽然看着美观，但是兼容性略差 将来代码打包后，History模式，刷新当前页面报404错误</p><p>Vue中的路由默认是hash模式，使用URL的hash模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p><p>history模式充分利用了 <code>history.pushState</code> API来完成 URL跳转而无需重新加载页面。</p><p>hash虽然出现在URL中，但不用包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</p><p>history模式提供了对历史记录进行修改的功能，只是当它们执行修改时，虽然改变了当前的URL，但浏览器不会立即向后端发送请求。history模式会出现404的情况，需要后台配置。</p><blockquote><p>404错误</p><p>1.hash模式下，仅hash符号之前的内容会被包含在请求中，如 http://www.xiaosutongxue.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回404错误；</p><p>2.history模式下，前端的url必须和实际向后端发起请求的url一致，如：http://www.xiaosutongxue.com/api/id，如果缺少对/api/id的路由处理，将返回404错误。</p></blockquote><h2 id="node解决history模式打包后-刷新当前页面报404错误" tabindex="-1"><a class="header-anchor" href="#node解决history模式打包后-刷新当前页面报404错误" aria-hidden="true">#</a> node解决history模式打包后，刷新当前页面报404错误</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> connect-history-api-fallback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;connect-history-api-fallback&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">history</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">&#39;/static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;苏东旭&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器启动成功了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","router-mode.html.vue"]]);export{r as default};
