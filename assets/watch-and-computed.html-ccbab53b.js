import{_ as t,p as c,q as e,a1 as l}from"./framework-5866ffd3.js";const a={},i=l('<h2>watch与computed</h2><h3 id="watch与computed的区别" tabindex="-1"><a class="header-anchor" href="#watch与computed的区别" aria-hidden="true">#</a> watch与computed的区别</h3><ul><li>watch中的函数是不需要调用的，而computed内部的函数需要调用，并且调用的时候不需要加()</li><li>watch（属性监听），监听的是属性的变化，拿变化后的属性做后续的操作；而computed（计算属性），是通过它依赖的属性发生变化后得到的值，并且数据的结果会被缓存，且函数中必须通过return返回最终的结果</li><li>watch需要在数据变化时执行异步或开销较大的操作时使用，而对于任何复杂逻辑或一个数据属性，在它所依赖的属性发生变化时，也要发生变化，这种情况下，我们最好使用计算属性computed</li><li>watch一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作</li></ul><h3 id="watch与computed的使用场景" tabindex="-1"><a class="header-anchor" href="#watch与computed的使用场景" aria-hidden="true">#</a> watch与computed的使用场景</h3><ul><li>computed <ul><li>当一个结果受多个属性影响的时候就需要用到computed</li><li>比如：购物车商品结算的时候</li></ul></li><li>watch <ul><li>当一个数据的变化参与到后续操作的时候就需要用watch</li><li>比如：搜索数据</li></ul></li><li>总结 <ul><li>一个值的结果受其他值的影响，用computed</li><li>一个值的变化将时刻影响其他逻辑，用watch</li></ul></li></ul>',5),h=[i];function d(u,o){return c(),e("div",null,h)}const n=t(a,[["render",d],["__file","watch-and-computed.html.vue"]]);export{n as default};
