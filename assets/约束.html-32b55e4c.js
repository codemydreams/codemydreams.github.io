import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const e={},t=p(`<h2 id="dql-查询语句" tabindex="-1"><a class="header-anchor" href="#dql-查询语句" aria-hidden="true">#</a> DQL:查询语句</h2><h3 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询" aria-hidden="true">#</a> 排序查询</h3><p>​ * 语法：order by 子句</p><p>​ * order by 排序字段1 排序方式1 ， 排序字段2 排序方式2...</p><p>​</p><p>​ * 排序方式：</p><p>​ * ASC：升序，默认的。</p><p>​ * DESC：降序。</p><p>​</p><p>​ * 注意：</p><p>​ * 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</p><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><p>将一列数据作为一个整体，进行纵向的计算。</p><p>​ \\1. count：计算个数</p><p>​ \\1. 一般选择非空的列：主键</p><p>​ \\2. count(*)</p><p>​ \\2. max：计算最大值</p><p>​ \\3. min：计算最小值</p><p>​ \\4. sum：计算和</p><p>​ \\5. avg：计算平均值</p><p>​ * 注意：聚合函数的计算，排除null值。</p><p>​ 解决方案：</p><p>​ \\1. 选择不包含非空的列进行计算</p><p>​ \\2. IFNULL函数</p><p>​</p><h3 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询:</h3><p>​ \\1. 语法：group by 分组字段；</p><p>​ \\2. 注意：</p><p>​ \\1. 分组之后查询的字段：分组字段、聚合函数</p><p>​ \\2. where 和 having 的区别？</p><p>​ \\1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</p><p>​ \\2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。</p><p>​</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分</span>
<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
          

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数</span>
<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
          

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span>
<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span>
        

<span class="token comment">-- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span>
<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>          

<span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数 <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h3><p>​ \\1. 语法：limit 开始的索引,每页查询的条数;</p><p>​ \\2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</p><p>​ -- 每页显示3条记录</p><p>​ SELECT * FROM student LIMIT 0,3; -- 第1页</p><p>​ SELECT * FROM student LIMIT 3,3; -- 第2页</p><p>​ SELECT * FROM student LIMIT 6,3; -- 第3页</p><p>​ \\3. limit 是一个MySQL&quot;方言&quot;</p><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><p>* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p><p>* 分类：</p><p>​ \\1. 主键约束：primary key</p><p>​ \\2. 非空约束：not null</p><p>​ \\3. 唯一约束：unique</p><p>​ \\4. 外键约束：foreign key</p><p>​</p><p>* 非空约束：not null，某一列的值不能为null</p><p>​ \\1. 创建表时添加约束</p><p>​ CREATE TABLE stu(</p><p>​ id INT,</p><p>​ NAME VARCHAR(20) NOT NULL -- name为非空</p><p>​ );</p><p>​ \\2. 创建表完后，添加非空约束</p><p>​ ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</p><p>​ \\3. 删除name的非空约束</p><p>​ ALTER TABLE stu MODIFY NAME VARCHAR(20);</p><p>* 唯一约束：unique，某一列的值不能重复</p><p>​ \\1. 注意：</p><p>​ * 唯一约束可以有NULL值，但是只能有一条记录为null</p><p>​ \\2. 在创建表时，添加唯一约束</p><p>​ CREATE TABLE stu(</p><p>​ id INT,</p><p>​ phone_number VARCHAR(20) UNIQUE -- 手机号</p><p>​ );</p><p>​ \\3. 删除唯一约束</p><p>​ ALTER TABLE stu DROP INDEX phone_number;</p><p>​ \\4. 在表创建完后，添加唯一约束</p><p>​ ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</p><p>​</p><p>主键约束：primary key。</p><p>​ \\1. 注意：</p><p>​ \\1. 含义：非空且唯一</p><p>​ \\2. 一张表只能有一个字段为主键</p><p>​ \\3. 主键就是表中记录的唯一标识</p><p>​</p><p>​ \\2. 在创建表时，添加主键约束</p><p>​ create table stu(</p><p>​ id int primary key,-- 给id添加主键约束</p><p>​ name varchar(20)</p><p>​ );</p><p>​</p><p>​ \\3. 删除主键</p><p>​ -- 错误 alter table stu modify id int ;</p><p>​ ALTER TABLE stu DROP PRIMARY KEY;</p><p>​</p><p>​ \\4. 创建完表后，添加主键</p><p>​ ALTER TABLE stu MODIFY id INT PRIMARY KEY;</p><p>​</p><p>​ \\5. 自动增长：</p><p>​ \\1. 概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p><p>​</p><p>​ \\2. 在创建表时，添加主键约束，并且完成主键自增长</p><p>​ create table stu(</p><p>​ id int primary key auto_increment,-- 给id添加主键约束</p><p>​ name varchar(20)</p><p>​ );</p><p>​</p><p>​ \\3. 删除自动增长</p><p>​ ALTER TABLE stu MODIFY id INT;</p><p>​ \\4. 添加自动增长</p><p>​ ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</p><p>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</p><p>​ \\1. 在创建表时，可以添加外键</p><p>​ * 语法：</p><p>​ create table 表名(</p><p>​ ....</p><p>​ 外键列</p><p>​ constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</p><p>​ );</p><p>​</p><p>​ \\2. 删除外键</p><p>​ ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</p><p>​</p><p>​ \\3. 创建表之后，添加外键</p><p>​ ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</p><p>​ \\4. 级联操作</p><p>​ \\1. 添加级联操作</p><p>​ 语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称</p><p>​ FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ;</p><p>​ \\2. 分类：</p><p>​ \\1. 级联更新：ON UPDATE CASCADE</p><p>​ \\2. 级联删除：ON DELETE CASCADE</p><h2 id="多表之间的关系" tabindex="-1"><a class="header-anchor" href="#多表之间的关系" aria-hidden="true">#</a> 多表之间的关系</h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ol><li><p>一对一</p><ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li><p>一对多（多对一）</p><ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li><p>多对多：</p><ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><h3 id="实现关系" tabindex="-1"><a class="header-anchor" href="#实现关系" aria-hidden="true">#</a> 实现关系：</h3><ol><li><p>一对一</p><ul><li><p>如：人和身份证</p></li><li><p>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</p></li></ul></li><li><p>一对多（多对一）</p><ul><li><p>如：部门和员工</p></li><li><p>实现方式：在多的一方建立外键，指向一的一方的主键。</p></li></ul></li><li><p>多对多</p><ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li></ol><p>​</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建旅游线路分类表 tab_category</span>
<span class="token comment">-- cid 旅游线路分类主键，自动增长</span>
<span class="token comment">-- cname 旅游线路分类名称非空，唯一，字符串 100</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_category <span class="token punctuation">(</span>
	cid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	cname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建旅游线路表 tab_route</span>
<span class="token comment">/*
	rid 旅游线路主键，自动增长
	rname 旅游线路名称非空，唯一，字符串 100
	price 价格
	rdate 上架时间，日期类型
	cid 外键，所属分类
*/</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_route<span class="token punctuation">(</span>
	rid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	rname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
	price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
	rdate <span class="token keyword">DATE</span><span class="token punctuation">,</span>
	cid <span class="token keyword">INT</span><span class="token punctuation">,</span>
	<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*创建用户表 tab_user
	uid 用户主键，自增长
	username 用户名长度 100，唯一，非空
	password 密码长度 30，非空
	name 真实姓名长度 100
	birthday 生日
	sex 性别，定长字符串 1
	telephone 手机号，字符串 11
	email 邮箱，字符串长度 100
*/</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_user <span class="token punctuation">(</span>
	uid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	birthday <span class="token keyword">DATE</span><span class="token punctuation">,</span>
	sex <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
	telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*创建收藏表 tab_favorite
	rid 旅游线路 id，外键
	date 收藏时间
	uid 用户 id，外键
	rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次
*/</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_favorite <span class="token punctuation">(</span>
	rid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 线路id</span>
	<span class="token keyword">DATE</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
	uid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 用户id</span>
	<span class="token comment">-- 创建复合主键</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>rid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 联合主键</span>
	<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_route<span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_user<span class="token punctuation">(</span>uid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="范式" tabindex="-1"><a class="header-anchor" href="#范式" aria-hidden="true">#</a> 范式</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念：</h3><p>设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p><p>​</p><p>​ 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>​ 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><p>​</p><h3 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1" aria-hidden="true">#</a> 分类：</h3><ol><li><p>第一范式（1NF）：每一列都是不可分割的原子数据项</p></li><li><p>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p></li></ol><p>​ * 几个概念：</p><p>​ \\1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</p><p>​ 例如：学号--&gt;姓名。 （学号，课程名称） --&gt; 分数</p><p>​ \\2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。</p><p>​ 例如：（学号，课程名称） --&gt; 分数</p><p>​ \\3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。</p><p>​ 例如：（学号，课程名称） -- &gt; 姓名</p><p>​ \\4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</p><p>​ 例如：学号--&gt;系名，系名--&gt;系主任</p><p>​ \\5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</p><p>​ 例如：该表中码为：（学号，课程名称）</p><p>​ * 主属性：码属性组中的所有属性</p><p>​ * 非主属性：除过码属性组的属性</p><p>​</p><ol start="3"><li>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</li></ol><h2 id="数据库的备份和还原" tabindex="-1"><a class="header-anchor" href="#数据库的备份和还原" aria-hidden="true">#</a> 数据库的备份和还原</h2><ol><li><p>命令行</p><ul><li><p>语法：</p><ul><li><p>备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</p></li><li><p>还原：</p><ol><li><p>登录数据库</p></li><li><p>创建数据库</p></li><li><p>使用数据库</p></li><li><p>执行文件。source 文件路径</p></li></ol></li></ul></li></ul></li><li><p>图形化工具</p></li></ol>`,160),i=[t];function l(o,c){return s(),a("div",null,i)}const d=n(e,[["render",l],["__file","约束.html.vue"]]);export{d as default};
